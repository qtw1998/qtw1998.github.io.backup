{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit [mkdocs.org]. Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit [mkdocs.org].","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Project layout"},{"location":"Sorting/","text":"\u6392\u5e8f\u7b97\u6cd5 \u00b6 O(n2) \u00b6 TestHelper \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H \u9009\u62e9\u6392\u5e8fSelection Sort \u00b6 ----\u7b2c\u4e8c\u7ae021\u5206\u949f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } 1 2 3 4 5 6 int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ; \u63d2\u5165\u6392\u5e8f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } 1 2 3 4 5 6 7 8 9 10 11 //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8 \u5e0c\u5c14\u6392\u5e8fshell sort \u00b6 \u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144 \u8865\u5145\uff1a \u00b6 \u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; } \u5192\u6ce1\u6392\u5e8f\uff08Bubble sort) \u00b6 \u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; } O(nlogn) \u00b6 \u5f52\u5e76\u6392\u5e8fMerge Sort \u00b6 \u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0 \u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 \u65e0\u4f18\u5316\u7684\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; } \u4f18\u5316\u4e00 \u00b6 \u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a \u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 ![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png) \u5feb\u901f\u6392\u5e8fQuickSort \u00b6 ![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"Sorting"},{"location":"Sorting/#_1","text":"","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"Sorting/#on2","text":"","title":"O(n2)"},{"location":"Sorting/#testhelper","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H","title":"TestHelper"},{"location":"Sorting/#selection-sort","text":"----\u7b2c\u4e8c\u7ae021\u5206\u949f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } 1 2 3 4 5 6 int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ;","title":"\u9009\u62e9\u6392\u5e8fSelection Sort"},{"location":"Sorting/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } 1 2 3 4 5 6 7 8 9 10 11 //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"Sorting/#shell-sort","text":"\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144","title":"\u5e0c\u5c14\u6392\u5e8fshell sort"},{"location":"Sorting/#_3","text":"\u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; }","title":"\u8865\u5145\uff1a"},{"location":"Sorting/#bubble-sort","text":"\u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; }","title":"\u5192\u6ce1\u6392\u5e8f\uff08Bubble sort)"},{"location":"Sorting/#onlogn","text":"","title":"O(nlogn)"},{"location":"Sorting/#merge-sort","text":"\u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0","title":"\u5f52\u5e76\u6392\u5e8fMerge Sort"},{"location":"Sorting/#_4","text":"","title":"\u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; }","title":"\u65e0\u4f18\u5316\u7684\u5b9e\u73b0"},{"location":"Sorting/#_6","text":"\u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a","title":"\u4f18\u5316\u4e00"},{"location":"Sorting/#_7","text":"![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png)","title":"\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#quicksort","text":"![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"\u5feb\u901f\u6392\u5e8fQuickSort"},{"location":"Java/web_rig_login/","text":"\u7528\u6237\u5b9e\u4f53\u7684\u521b\u5efa---\u521b\u5efaUser 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.imooc.domain ; public class User { private String username ; private String password ; private String nickname ; private String sex ; private String hobby ; private String path ; public String getUsername () { return username ; } public void setUsername ( String username ) { this . username = username ; } public String getPassword () { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getNickname () { return nickname ; } public void setNickname ( String nickname ) { this . nickname = nickname ; } public String getSex () { return sex ; } public void setSex ( String sex ) { this . sex = sex ; } public String getHobby () { return hobby ; } public void setHobby ( String hobby ) { this . hobby = hobby ; } public String getPath () { return path ; } public void setPath ( String path ) { this . path = path ; } } \u521d\u59cb\u5316\u96c6\u5408---new InitServlet web.xml Info 1 2 3 4 5 6 7 8 9 10 11 <servlet> <description></description> <display-name> InitServlet </display-name> <servlet-name> InitServlet </servlet-name> <servlet-class> com.imooc.servlet.InitServet </servlet-class> <load-on-startup> 2 </load-on-startup> <!-- \u5728\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\u521b\u5efaServlet\u5b9e\u4f8b --> </servlet> <servlet-mapping> <servlet-name> InitServlet </servlet-name> <url-pattern> /InitServlet </url-pattern> </servlet-mapping> InitServlet.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.imooc.servlet ; import java.util.ArrayList ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import com.imooc.domain.User ; /** * \u7528\u6237\u6ce8\u518c\u7684\u521d\u59cb\u5316\u7684Servlet\u7c7b */ @WebServlet ( \"/InitServlet\" ) public class InitServlet extends HttpServlet { @Override public void init () throws ServletException { //\u521b\u5efa\u4e00\u4e2aList\u96c6\u5408\u7528\u4e8e\u4fdd\u5b58\u7528\u6237\u6ce8\u518c\u7684\u4fe1\u606f List < User > list = new ArrayList < User >(); //\u5c06list\u4fdd\u5b58\u5230ServletContext\u4f5c\u7528\u57df\u5f53\u4e2d this . getServletContext (). setAttribute ( \"list\" , list ); } } \u8868\u5355\u5f53\u4e2d\u7684\u6587\u4ef6\u4e0a\u4f20---\u77e5\u8bc6\u70b9 admonition 1 2 3 4 5 6 7 8 9 10 11 <!-- \u6587\u4ef6\u4e0a\u4f20\u7684\u6761\u4ef6 * \u8868\u5355\u5fc5\u987b\u662fpost\u63d0\u4ea4\u65b9\u5f0f(get\u6709\u5927\u5c0f\u7684\u9650\u5236) * \u8868\u5355\u4e2d\u5fc5\u987b\u6709\u6587\u4ef6\u4e0a\u4f20\u9879\uff0c\u6587\u4ef6\u4e0a\u4f20\u9879\u5fc5\u987b\u6709name\u5c5e\u6027\u548c\u503c <tr> <td class=\"td1\">\u4e0a\u4f20\u5934\u50cf</td> <td><input type=\"file\" id=\"photo\" name=\"upload\"></td> </tr> * \u8868\u5355\u7684enctype\u5c5e\u6027\u5fc5\u987b\u8bbe\u7f6e\u4e3amultipart/form-data <form action=\"/reg_login/RegistServlet\" method=\"post\" enctype=\"multipart/form-data\"> --> extionsion 1 2 3 4 \u8868\u5355\u6587\u4ef6\u7684\u4e0a\u4f20\u9700\u8981\u7528\u5230\u7684jar\u5305 \uff08/reg_login/WebContent/WEB-INF/lib/commons-fileupload-1.2.1.jar /reg_login/WebContent/WEB-INF/lib/commons-io-1.4.jar\uff09\uff1a https://share.weiyun.com/5VAFwpj RegistServlet InitVersion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package com.imooc.servlet ; import java.io.IOException ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a servletFileUpload . parseRequest ( request ); //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem\uff0c\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } TryCatchVersion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package com.imooc.servlet ; import java.io.IOException ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.FileItem ; import org.apache.commons.fileupload.FileUploadException ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 package com.imooc.servlet ; import java.io.IOException ; import java.util.ArrayList ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.FileItem ; import org.apache.commons.fileupload.FileUploadException ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //\u5b9a\u4e49\u4e00\u4e2alist\u96c6\u5408\uff0c\u4fdd\u5b58\u5174\u8da3\u7231\u597d\u6570\u636e List < String > hobbylist = new ArrayList < String >(); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); //\u63a5\u6536\u590d\u9009\u6846\u7684\u6570\u636e // <tr> // <td class=\"td1\">\u5174\u8da3\u7231\u597d</td> // <td><label> // <input type=\"checkbox\" name=\"hobby\" value=\"\u7bee\u7403\">\u7bee\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u8db3\u7403\">\u8db3\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u6392\u7403\">\u6392\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u7fbd\u6bdb\u7403\">\u7fbd\u6bdb\u7403 // </label></td> // </tr> if ( \"hobby\" . equals ( name )) { //String name = fileItem.getFieldName(); String hobbyValue = fileItem . getString ( \"UTF-8\" ); hobbylist . add ( hobbyValue ); hobbyValue = hobbylist . toString (). substring ( 1 , hobbylist . toString (). length () - 1 ); // [xxx,yyy] --> xxx,yyy System . out . println ( name + \" \" + hobbylist ); //\u6253\u5370ArryList } } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } \u5b9e\u73b0User\u7684\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //\u5b9a\u4e49\u4e00\u4e2aMap\u96c6\u5408\u7528\u4e8e\u4fdd\u5b58\u63a5\u6536\u5230\u7684\u6570\u636e Map < String , String > map = new HashMap < String , String >(); //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //\u5b9a\u4e49\u4e00\u4e2alist\u96c6\u5408\uff0c\u4fdd\u5b58\u5174\u8da3\u7231\u597d\u6570\u636e List < String > hobbylist = new ArrayList < String >(); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); //\u63a5\u6536\u590d\u9009\u6846\u7684\u6570\u636e // <tr> // <td class=\"td1\">\u5174\u8da3\u7231\u597d</td> // <td><label> // <input type=\"checkbox\" name=\"hobby\" value=\"\u7bee\u7403\">\u7bee\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u8db3\u7403\">\u8db3\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u6392\u7403\">\u6392\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u7fbd\u6bdb\u7403\">\u7fbd\u6bdb\u7403 // </label></td> // </tr> if ( \"hobby\" . equals ( name )) { //String name = fileItem.getFieldName(); String hobbyValue = fileItem . getString ( \"UTF-8\" ); hobbylist . add ( hobbyValue ); hobbyValue = hobbylist . toString (). substring ( 1 , hobbylist . toString (). length () - 1 ); // [xxx,yyy] --> xxx,yyy System . out . println ( name + \" \" + hobbylist ); //\u6253\u5370ArryList //\u5c06\u7231\u597d\u7684\u6570\u636e\u5b58\u5165\u5230Map\u96c6\u5408\u5f53\u4e2d map . put ( name , hobbyValue ); } else { //\u975e\u590d\u9009\u6846\u7684\u653e\u5165\u5230Map\u96c6\u5408\u5f53\u4e2d map . put ( name , value ); } } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } System . out . println ( map ); //\u5c01\u88c5\u6570\u636e\u5230User\u5f53\u4e2d User user = new User (); user . setUsername ( map . get ( \"username\" )); user . setPassword ( map . get ( \"password\" )); user . setNickname ( map . get ( \"nickname\" )); user . setSex ( map . get ( \"sex\" )); user . setHobby ( map . get ( \"password\" )); //\u5c06\u6ce8\u518c\u7528\u6237\u7684\u4fe1\u606f\u5b58\u5165\u5230List\u96c6\u5408\u5f53\u4e2d\uff1a //\u5c06\u83b7\u5f97\u7684ServletContext\u5bf9\u8c61\uff1a\u5148\u53d6\u51fa\u6765\u96c6\u5408\uff0c\u5f80\u91cc\u9762\u6dfb\u52a0user\u540e\uff0c\u518d\u653e\u8fdb\u53bb---\u518d\u5230InitServlet.java\u5f53\u4e2drefactor toString List < User > userlist = ( List < User >) this . getServletContext (). getAttribute ( \"list\" ); userlist . add ( user ); for ( User u : userlist ) { System . out . println ( u ); } this . getServletContext (). setAttribute ( \"list\" , userlist ); } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } \u6587\u4ef6\u4e0a\u4f20\u540d\u79f0\u4e0d\u53ef\u4ee5\u91cd\u590d \u968f\u673a\u5b57\u7b26\u4e32\u7684\u751f\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package com.imooc.utils ; import java.util.UUID ; public class UploadUtils { /* * \u751f\u6210\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff1b */ public static String getUUIDFileName ( String fileName ) { return ; } public static void main ( String [] args ) { System . out . println ( UUID . randomUUID ()); //7e7e6ff9-578e-499e-92ff-39d199d06092 } } \u6b63\u5f0f\u751f\u6210\u6587\u4ef6\u540d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.imooc.utils ; import java.util.UUID ; public class UploadUtils { /* * \u751f\u6210\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff1b */ public static String getUUIDFileName ( String fileName ) { // \u5c06\u6587\u4ef6\u540d\u7684\u524d\u9762\u90e8\u5206\u8fdb\u884c\u622a\u53d6\uff1axx.jpg --> .jpg int idx = fileName . lastIndexOf ( \".\" ); //\u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u503c\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e String extension = fileName . substring ( idx ); //\u62d3\u5c55\u540d String uuidFileName = UUID . randomUUID (). toString (). replaceAll ( \"-\" , \"\" ) + extension ; // return uuidFileName ; } public static void main ( String [] args ) { System . out . println ( getUUIDFileName ( \"1.jpg\" )); //777b455a815b4eee87771f0568b29500.jpg } }","title":"Web \u5b9e\u73b0\u767b\u5f55\u6ce8\u518c\u529f\u80fd"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/","text":"File \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 head a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u524d8\u884c tail a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u540e8\u884c --------------wc \u7edf\u8ba1------------------ wc a.txt 6 5 40 a.txt ##\u8868\u793a\u663e\u793a \u884c\u6570 \u5355\u8bcd\u6570 \u5b57\u7b26\u6570 \u6587\u4ef6\u540d wc -w(word) -l(line) -c(\u5b57\u7b26\u6570) a.txt ##\u5355\u7eaf\u663e\u793a\u5355\u8bcd\u6570 5 a.txt ----------------\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c------------------------ rm filename.txt ##remove the file mkdir file mv file1.txt file2.txt ##change the filename mv file1.txt CTutorial/ ##move to another filefolder less file1.txt ##browser ------------------------grep \u67e5\u627e----------------------------------- grep \u67e5\u627e\u5b57\u7b26 filename -->\u7ea2\u8272\u8fd4\u56de grep l* filename.txt --> 0~n\u6b21 grep ll* filename.txt --> \u81f3\u5c11\u51fa\u73b01\u6b21\uff08\u5e26l\u7684\u90fd\u88ab\u627e\u51fa\u6765\u4e86\uff09 grep ^H filename.txt --> \u4ee5H\u5b57\u6bcd\u5f00\u5934\u7684 grep ab.d a.txt --> .\u4ee3\u8868\u4efb\u610f\u5b57\u7b26 abcdef abaddfadf abddggfgf grep [Aa]b.d a.txt -->\u4ee3\u8868\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5\u751a\u81f3 --> grep [A-Za-z] filename.txt abcdef abaddfadf Abddggfgf [\u7efc\u5408\u5e94\u7528] grep [A-Za-z]b.d a.txt abcdef abaddfadf cbddggfgf --------------------wc + grep -------------------- ![](http://pdqq4cby3.bkt.clouddn.com/15361425196772.jpg) chmod \u6743\u9650\u00b7\u547d\u4ee4\u76f8\u5173 \u00b6 chmod\u7684\u547d\u4ee4\u76f8\u5173 1 2 3 chmod u+r file.txt chmod go-r file.txt chmod \u7684\u4e8c\u8fdb\u5236\u8868\u793a Linux Shell Script \u00b6 > redirect \u628a\u8f93\u51fa\u6253\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u00b7\u628a\u8f93\u5165\u4ece\u6587\u4ef6\u91cc\u8bfb\u51fa\u6765 \u4f7f\u7528$ sh init.sh \u6765\u6267\u884c\u811a\u672c\u6587\u4ef6 variable \u53d8\u91cf echo Linux\u91cc\u7684\u53d8\u91cf\u811a\u672c\u91cc 1 2 3 4 5 a = 10 #\u4e0d\u53ef\u4ee5\u6253\u7a7a\u683c echo $a #\u8f93\u51faa \u201c$\u201d\u8d4b\u503c\u65f6 \u8bfb\u53d6\u65f6 echo \"Hello World\" $a echo Hello World $a #\u53ef\u4e0d\u5199\u53cc\u5f15\u53f7 expr \u8ba1\u7b97\u5f0f\u5b50 + - * / 1 2 3 4 5 a = 1 b = 2 c = ` expr $a + $b ` #y\u8fd0\u7b97\u7b26\u5de6\u53f3\u5fc5\u987b\u52a0\u7a7a\u683c d = ` expr $a \\* $b ` echo $c if \u6bd4\u8f83\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if [] then ... else ... fi > -gt greater than < -lt less than > = -ge greater or equal < = -le less or equal ! = -ne not equal == -eq equal a = 1 b = 2 if [ $a -gt $b ] then echo $a else echo $b fi for while \u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 for x in 1 2 3 4 5 do echo $x done x = 1 while [ $x -le 10 ] do echo $x x = ` expr $x + 1 ` done","title":"Linux\u57fa\u672c\u547d\u4ee4"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 head a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u524d8\u884c tail a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u540e8\u884c --------------wc \u7edf\u8ba1------------------ wc a.txt 6 5 40 a.txt ##\u8868\u793a\u663e\u793a \u884c\u6570 \u5355\u8bcd\u6570 \u5b57\u7b26\u6570 \u6587\u4ef6\u540d wc -w(word) -l(line) -c(\u5b57\u7b26\u6570) a.txt ##\u5355\u7eaf\u663e\u793a\u5355\u8bcd\u6570 5 a.txt ----------------\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c------------------------ rm filename.txt ##remove the file mkdir file mv file1.txt file2.txt ##change the filename mv file1.txt CTutorial/ ##move to another filefolder less file1.txt ##browser ------------------------grep \u67e5\u627e----------------------------------- grep \u67e5\u627e\u5b57\u7b26 filename -->\u7ea2\u8272\u8fd4\u56de grep l* filename.txt --> 0~n\u6b21 grep ll* filename.txt --> \u81f3\u5c11\u51fa\u73b01\u6b21\uff08\u5e26l\u7684\u90fd\u88ab\u627e\u51fa\u6765\u4e86\uff09 grep ^H filename.txt --> \u4ee5H\u5b57\u6bcd\u5f00\u5934\u7684 grep ab.d a.txt --> .\u4ee3\u8868\u4efb\u610f\u5b57\u7b26 abcdef abaddfadf abddggfgf grep [Aa]b.d a.txt -->\u4ee3\u8868\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5\u751a\u81f3 --> grep [A-Za-z] filename.txt abcdef abaddfadf Abddggfgf [\u7efc\u5408\u5e94\u7528] grep [A-Za-z]b.d a.txt abcdef abaddfadf cbddggfgf --------------------wc + grep -------------------- ![](http://pdqq4cby3.bkt.clouddn.com/15361425196772.jpg)","title":"File"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#chmod","text":"chmod\u7684\u547d\u4ee4\u76f8\u5173 1 2 3 chmod u+r file.txt chmod go-r file.txt chmod \u7684\u4e8c\u8fdb\u5236\u8868\u793a","title":"chmod \u6743\u9650\u00b7\u547d\u4ee4\u76f8\u5173"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#linux-shell-script","text":"> redirect \u628a\u8f93\u51fa\u6253\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u00b7\u628a\u8f93\u5165\u4ece\u6587\u4ef6\u91cc\u8bfb\u51fa\u6765 \u4f7f\u7528$ sh init.sh \u6765\u6267\u884c\u811a\u672c\u6587\u4ef6 variable \u53d8\u91cf echo Linux\u91cc\u7684\u53d8\u91cf\u811a\u672c\u91cc 1 2 3 4 5 a = 10 #\u4e0d\u53ef\u4ee5\u6253\u7a7a\u683c echo $a #\u8f93\u51faa \u201c$\u201d\u8d4b\u503c\u65f6 \u8bfb\u53d6\u65f6 echo \"Hello World\" $a echo Hello World $a #\u53ef\u4e0d\u5199\u53cc\u5f15\u53f7 expr \u8ba1\u7b97\u5f0f\u5b50 + - * / 1 2 3 4 5 a = 1 b = 2 c = ` expr $a + $b ` #y\u8fd0\u7b97\u7b26\u5de6\u53f3\u5fc5\u987b\u52a0\u7a7a\u683c d = ` expr $a \\* $b ` echo $c if \u6bd4\u8f83\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if [] then ... else ... fi > -gt greater than < -lt less than > = -ge greater or equal < = -le less or equal ! = -ne not equal == -eq equal a = 1 b = 2 if [ $a -gt $b ] then echo $a else echo $b fi for while \u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 for x in 1 2 3 4 5 do echo $x done x = 1 while [ $x -le 10 ] do echo $x x = ` expr $x + 1 ` done","title":"Linux Shell Script"}]}