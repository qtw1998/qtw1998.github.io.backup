{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit [mkdocs.org]. Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit [mkdocs.org].","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Project layout"},{"location":"Sorting/","text":"\u6392\u5e8f\u7b97\u6cd5 \u00b6 O(n2) \u00b6 TestHelper \u00b6 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H \u9009\u62e9\u6392\u5e8fSelection Sort \u00b6 ----\u7b2c\u4e8c\u7ae021\u5206\u949f template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ; \u63d2\u5165\u6392\u5e8f \u00b6 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8 \u5e0c\u5c14\u6392\u5e8fshell sort \u00b6 \u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144 \u8865\u5145\uff1a \u00b6 \u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; } \u5192\u6ce1\u6392\u5e8f\uff08Bubble sort) \u00b6 \u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; } O(nlogn) \u00b6 \u5f52\u5e76\u6392\u5e8fMerge Sort \u00b6 \u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0 \u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 \u65e0\u4f18\u5316\u7684\u5b9e\u73b0 \u00b6 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; } \u4f18\u5316\u4e00 \u00b6 \u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a \u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 ![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png) \u5feb\u901f\u6392\u5e8fQuickSort \u00b6 ![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"Sorting"},{"location":"Sorting/#_1","text":"","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"Sorting/#on2","text":"","title":"O(n2)"},{"location":"Sorting/#testhelper","text":"// // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H","title":"TestHelper"},{"location":"Sorting/#selection-sort","text":"----\u7b2c\u4e8c\u7ae021\u5206\u949f template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ;","title":"\u9009\u62e9\u6392\u5e8fSelection Sort"},{"location":"Sorting/#_2","text":"template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"Sorting/#shell-sort","text":"\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144","title":"\u5e0c\u5c14\u6392\u5e8fshell sort"},{"location":"Sorting/#_3","text":"\u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; }","title":"\u8865\u5145\uff1a"},{"location":"Sorting/#bubble-sort","text":"\u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; }","title":"\u5192\u6ce1\u6392\u5e8f\uff08Bubble sort)"},{"location":"Sorting/#onlogn","text":"","title":"O(nlogn)"},{"location":"Sorting/#merge-sort","text":"\u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0","title":"\u5f52\u5e76\u6392\u5e8fMerge Sort"},{"location":"Sorting/#_4","text":"","title":"\u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#_5","text":"//__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; }","title":"\u65e0\u4f18\u5316\u7684\u5b9e\u73b0"},{"location":"Sorting/#_6","text":"\u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a","title":"\u4f18\u5316\u4e00"},{"location":"Sorting/#_7","text":"![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png)","title":"\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#quicksort","text":"![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"\u5feb\u901f\u6392\u5e8fQuickSort"},{"location":"Java/tomcat\u914d\u7f6e/","text":"\u5173\u4e8eTomcat\u7aef\u53e3\u5360\u7528\u7684\u89e3\u51b3\u529e\u6cd5\u53cd\u601d \u00b6 \u901a\u8fc7 lsof -i:8080 \u6765\u67e5\u770b\u7aef\u53e3\u7684\u4f7f\u7528\u60c5\u51b5 ![Screenshot of \u7ec8\u7aef -2018-8-6, 3-27-17 PM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of \u7ec8\u7aef -2018-8-6, 3-27-17 PM-.png) \u901a\u8fc7 kill -9 PID \u6765\u6740\u6389\u5360\u75288080\u7aef\u53e3\u7684\u8fdb\u7a0b \u5173\u4e8eendorsed is not supported\u7684\u95ee\u9898 \u00b6 -Djava.endorsed.dirs=/Users/apache-tomcat-9.0.10/endorsed is not supported. Endorsed standards and standalone APIs in modular form will be supported via the concept of upgradeable modules. ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-8-6, 3-34-12 PM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-8-6, 3-34-12 PM-.png) \u5728Eclipse\u7684Run Configurations\u7684\u754c\u9762\u91cc \u6709\u4e00\u4e2a\u8bbe\u7f6e\u53c2\u6570\u91ccArguments\u9875\u9762\u91cc\u7684VM arguments\u7684\u53c2\u6570\u91cc\u9762\u628a\u6700\u540e\u7684\u6709-Djava.endorsed.dirs=\"D:\\java\\tomcat\\apache-tomcat-9.0.10\\endorsed\"\u7684\u53c2\u6570\u5220\u9664","title":"tomcat\u914d\u7f6e"},{"location":"Java/tomcat\u914d\u7f6e/#tomcat","text":"\u901a\u8fc7 lsof -i:8080 \u6765\u67e5\u770b\u7aef\u53e3\u7684\u4f7f\u7528\u60c5\u51b5 ![Screenshot of \u7ec8\u7aef -2018-8-6, 3-27-17 PM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of \u7ec8\u7aef -2018-8-6, 3-27-17 PM-.png) \u901a\u8fc7 kill -9 PID \u6765\u6740\u6389\u5360\u75288080\u7aef\u53e3\u7684\u8fdb\u7a0b","title":"\u5173\u4e8eTomcat\u7aef\u53e3\u5360\u7528\u7684\u89e3\u51b3\u529e\u6cd5\u53cd\u601d"},{"location":"Java/tomcat\u914d\u7f6e/#endorsed-is-not-supported","text":"-Djava.endorsed.dirs=/Users/apache-tomcat-9.0.10/endorsed is not supported. Endorsed standards and standalone APIs in modular form will be supported via the concept of upgradeable modules. ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-8-6, 3-34-12 PM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-8-6, 3-34-12 PM-.png) \u5728Eclipse\u7684Run Configurations\u7684\u754c\u9762\u91cc \u6709\u4e00\u4e2a\u8bbe\u7f6e\u53c2\u6570\u91ccArguments\u9875\u9762\u91cc\u7684VM arguments\u7684\u53c2\u6570\u91cc\u9762\u628a\u6700\u540e\u7684\u6709-Djava.endorsed.dirs=\"D:\\java\\tomcat\\apache-tomcat-9.0.10\\endorsed\"\u7684\u53c2\u6570\u5220\u9664","title":"\u5173\u4e8eendorsed is not supported\u7684\u95ee\u9898"}]}