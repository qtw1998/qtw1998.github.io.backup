{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit [mkdocs.org]. Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit [mkdocs.org].","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Project layout"},{"location":"Sorting/","text":"\u6392\u5e8f\u7b97\u6cd5 \u00b6 O(n2) \u00b6 TestHelper \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H \u9009\u62e9\u6392\u5e8fSelection Sort \u00b6 ----\u7b2c\u4e8c\u7ae021\u5206\u949f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } 1 2 3 4 5 6 int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ; \u63d2\u5165\u6392\u5e8f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } 1 2 3 4 5 6 7 8 9 10 11 //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8 \u5e0c\u5c14\u6392\u5e8fshell sort \u00b6 \u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144 \u8865\u5145\uff1a \u00b6 \u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; } \u5192\u6ce1\u6392\u5e8f\uff08Bubble sort) \u00b6 \u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; } O(nlogn) \u00b6 \u5f52\u5e76\u6392\u5e8fMerge Sort \u00b6 \u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0 \u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 \u65e0\u4f18\u5316\u7684\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; } \u4f18\u5316\u4e00 \u00b6 \u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a \u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 ![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png) \u5feb\u901f\u6392\u5e8fQuickSort \u00b6 ![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"Sorting/#_1","text":"","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"Sorting/#on2","text":"","title":"O(n2)"},{"location":"Sorting/#testhelper","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H","title":"TestHelper"},{"location":"Sorting/#selection-sort","text":"----\u7b2c\u4e8c\u7ae021\u5206\u949f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } 1 2 3 4 5 6 int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ;","title":"\u9009\u62e9\u6392\u5e8fSelection Sort"},{"location":"Sorting/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } 1 2 3 4 5 6 7 8 9 10 11 //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"Sorting/#shell-sort","text":"\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144","title":"\u5e0c\u5c14\u6392\u5e8fshell sort"},{"location":"Sorting/#_3","text":"\u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; }","title":"\u8865\u5145\uff1a"},{"location":"Sorting/#bubble-sort","text":"\u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; }","title":"\u5192\u6ce1\u6392\u5e8f\uff08Bubble sort)"},{"location":"Sorting/#onlogn","text":"","title":"O(nlogn)"},{"location":"Sorting/#merge-sort","text":"\u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0","title":"\u5f52\u5e76\u6392\u5e8fMerge Sort"},{"location":"Sorting/#_4","text":"","title":"\u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; }","title":"\u65e0\u4f18\u5316\u7684\u5b9e\u73b0"},{"location":"Sorting/#_6","text":"\u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a","title":"\u4f18\u5316\u4e00"},{"location":"Sorting/#_7","text":"![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png)","title":"\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#quicksort","text":"![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"\u5feb\u901f\u6392\u5e8fQuickSort"},{"location":"DSandALGORITHM/Recursion/","text":"core idea & forecasted cases use the sequence recursion the sequence must be already sorted the complexity is O(n) linear [pointer1] \u2192 0 set forward | [pointer2] \u2192 n - 1 set back caseI : arr[i] + arr[j] == M : unknown range(i++ j--) caseII : arr[i] + arr[j] < M : unknown range(i++) caseIII : arr[i] + arr[j] > M : unknown range(j--) 1 void ```c++ tab=\"merge two sections\" void merge(int arr1[],int n1,int arr2[],int n2,int arr_wanted[]) { int i = 0,j = 0,index = 0; while(i < n1 && j < n2) { if(arr1[i] <= arr2[j]) arr_wanted[index++] = arr1[i++]; else arr_wanted[index++] = arr2[j++]; while(i < n1) arr_wanted[index++] = arr1[i++]; while(j < n2) arr_wanted[index++] = arr2[j++]; } } ```","title":"Recursion"},{"location":"DSandALGORITHM/Sorting/","text":"O(n2) \u00b6 Selection Sort \u00b6 core idea \u2460 put the smallest number in the first place 'at every loop' \u2461 the index is the standard code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void selectionSort ( int arr [], int n ) { for ( int i = 0 ; i < n ; ++ i ) { int min_index = i ; for ( int j = i + 1 ; j < n ; ++ j ) //j is the later number of i at any time { if ( arr [ j ] < arr [ min_index ]) { min_index = j ; //find the min index in the loop } //we already get the smallest number in this loop 'when i still at the place which have not move to the next place' swap ( arr [ min_index ], arr [ i ]); // } } } when using swap directly,must add \"using namespace std;\" Insertion Sort \u00b6 core idea find the second number as a key(standard), use key to compare with the former numbers if less,the former number(closing) set back one place & key keeping compare with the former numbers until key bigger than the former number or get the limitation(out of the range) code myidea 1 2 3 4 5 6 7 8 9 10 11 12 void insertionSort ( int arr [], int n ) { for ( int j = 1 ; j < n ; ++ j ) { int key = arr [ j ]; int i = j - 1 ; for ( j ; key < arr [ i ] && i >= - 1 ; -- i ) { arr [ i + 1 ] = arr [ i ]; } arr [ i + 1 ] = key ; } } version-selected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; }","title":"Sorting"},{"location":"DSandALGORITHM/Sorting/#on2","text":"","title":"O(n2)"},{"location":"DSandALGORITHM/Sorting/#selection-sort","text":"core idea \u2460 put the smallest number in the first place 'at every loop' \u2461 the index is the standard code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void selectionSort ( int arr [], int n ) { for ( int i = 0 ; i < n ; ++ i ) { int min_index = i ; for ( int j = i + 1 ; j < n ; ++ j ) //j is the later number of i at any time { if ( arr [ j ] < arr [ min_index ]) { min_index = j ; //find the min index in the loop } //we already get the smallest number in this loop 'when i still at the place which have not move to the next place' swap ( arr [ min_index ], arr [ i ]); // } } } when using swap directly,must add \"using namespace std;\"","title":"Selection Sort"},{"location":"DSandALGORITHM/Sorting/#insertion-sort","text":"core idea find the second number as a key(standard), use key to compare with the former numbers if less,the former number(closing) set back one place & key keeping compare with the former numbers until key bigger than the former number or get the limitation(out of the range) code myidea 1 2 3 4 5 6 7 8 9 10 11 12 void insertionSort ( int arr [], int n ) { for ( int j = 1 ; j < n ; ++ j ) { int key = arr [ j ]; int i = j - 1 ; for ( j ; key < arr [ i ] && i >= - 1 ; -- i ) { arr [ i + 1 ] = arr [ i ]; } arr [ i + 1 ] = key ; } } version-selected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; }","title":"Insertion Sort"},{"location":"Java/web_rig_login/","text":"\u7528\u6237\u5b9e\u4f53\u7684\u521b\u5efa---\u521b\u5efaUser 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.imooc.domain ; public class User { private String username ; private String password ; private String nickname ; private String sex ; private String hobby ; private String path ; public String getUsername () { return username ; } public void setUsername ( String username ) { this . username = username ; } public String getPassword () { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getNickname () { return nickname ; } public void setNickname ( String nickname ) { this . nickname = nickname ; } public String getSex () { return sex ; } public void setSex ( String sex ) { this . sex = sex ; } public String getHobby () { return hobby ; } public void setHobby ( String hobby ) { this . hobby = hobby ; } public String getPath () { return path ; } public void setPath ( String path ) { this . path = path ; } } \u521d\u59cb\u5316\u96c6\u5408---new InitServlet web.xml Info 1 2 3 4 5 6 7 8 9 10 11 <servlet> <description></description> <display-name> InitServlet </display-name> <servlet-name> InitServlet </servlet-name> <servlet-class> com.imooc.servlet.InitServet </servlet-class> <load-on-startup> 2 </load-on-startup> <!-- \u5728\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\u521b\u5efaServlet\u5b9e\u4f8b --> </servlet> <servlet-mapping> <servlet-name> InitServlet </servlet-name> <url-pattern> /InitServlet </url-pattern> </servlet-mapping> InitServlet.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.imooc.servlet ; import java.util.ArrayList ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import com.imooc.domain.User ; /** * \u7528\u6237\u6ce8\u518c\u7684\u521d\u59cb\u5316\u7684Servlet\u7c7b */ @WebServlet ( \"/InitServlet\" ) public class InitServlet extends HttpServlet { @Override public void init () throws ServletException { //\u521b\u5efa\u4e00\u4e2aList\u96c6\u5408\u7528\u4e8e\u4fdd\u5b58\u7528\u6237\u6ce8\u518c\u7684\u4fe1\u606f List < User > list = new ArrayList < User >(); //\u5c06list\u4fdd\u5b58\u5230ServletContext\u4f5c\u7528\u57df\u5f53\u4e2d this . getServletContext (). setAttribute ( \"list\" , list ); } } \u8868\u5355\u5f53\u4e2d\u7684\u6587\u4ef6\u4e0a\u4f20---\u77e5\u8bc6\u70b9 admonition 1 2 3 4 5 6 7 8 9 10 11 <!-- \u6587\u4ef6\u4e0a\u4f20\u7684\u6761\u4ef6 * \u8868\u5355\u5fc5\u987b\u662fpost\u63d0\u4ea4\u65b9\u5f0f(get\u6709\u5927\u5c0f\u7684\u9650\u5236) * \u8868\u5355\u4e2d\u5fc5\u987b\u6709\u6587\u4ef6\u4e0a\u4f20\u9879\uff0c\u6587\u4ef6\u4e0a\u4f20\u9879\u5fc5\u987b\u6709name\u5c5e\u6027\u548c\u503c <tr> <td class=\"td1\">\u4e0a\u4f20\u5934\u50cf</td> <td><input type=\"file\" id=\"photo\" name=\"upload\"></td> </tr> * \u8868\u5355\u7684enctype\u5c5e\u6027\u5fc5\u987b\u8bbe\u7f6e\u4e3amultipart/form-data <form action=\"/reg_login/RegistServlet\" method=\"post\" enctype=\"multipart/form-data\"> --> extionsion 1 2 3 4 \u8868\u5355\u6587\u4ef6\u7684\u4e0a\u4f20\u9700\u8981\u7528\u5230\u7684jar\u5305 \uff08/reg_login/WebContent/WEB-INF/lib/commons-fileupload-1.2.1.jar /reg_login/WebContent/WEB-INF/lib/commons-io-1.4.jar\uff09\uff1a https://share.weiyun.com/5VAFwpj RegistServlet InitVersion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package com.imooc.servlet ; import java.io.IOException ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a servletFileUpload . parseRequest ( request ); //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem\uff0c\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } TryCatchVersion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package com.imooc.servlet ; import java.io.IOException ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.FileItem ; import org.apache.commons.fileupload.FileUploadException ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 package com.imooc.servlet ; import java.io.IOException ; import java.util.ArrayList ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.FileItem ; import org.apache.commons.fileupload.FileUploadException ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //\u5b9a\u4e49\u4e00\u4e2alist\u96c6\u5408\uff0c\u4fdd\u5b58\u5174\u8da3\u7231\u597d\u6570\u636e List < String > hobbylist = new ArrayList < String >(); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); //\u63a5\u6536\u590d\u9009\u6846\u7684\u6570\u636e // <tr> // <td class=\"td1\">\u5174\u8da3\u7231\u597d</td> // <td><label> // <input type=\"checkbox\" name=\"hobby\" value=\"\u7bee\u7403\">\u7bee\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u8db3\u7403\">\u8db3\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u6392\u7403\">\u6392\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u7fbd\u6bdb\u7403\">\u7fbd\u6bdb\u7403 // </label></td> // </tr> if ( \"hobby\" . equals ( name )) { //String name = fileItem.getFieldName(); String hobbyValue = fileItem . getString ( \"UTF-8\" ); hobbylist . add ( hobbyValue ); hobbyValue = hobbylist . toString (). substring ( 1 , hobbylist . toString (). length () - 1 ); // [xxx,yyy] --> xxx,yyy System . out . println ( name + \" \" + hobbylist ); //\u6253\u5370ArryList } } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } \u5b9e\u73b0User\u7684\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //\u5b9a\u4e49\u4e00\u4e2aMap\u96c6\u5408\u7528\u4e8e\u4fdd\u5b58\u63a5\u6536\u5230\u7684\u6570\u636e Map < String , String > map = new HashMap < String , String >(); //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //\u5b9a\u4e49\u4e00\u4e2alist\u96c6\u5408\uff0c\u4fdd\u5b58\u5174\u8da3\u7231\u597d\u6570\u636e List < String > hobbylist = new ArrayList < String >(); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); //\u63a5\u6536\u590d\u9009\u6846\u7684\u6570\u636e // <tr> // <td class=\"td1\">\u5174\u8da3\u7231\u597d</td> // <td><label> // <input type=\"checkbox\" name=\"hobby\" value=\"\u7bee\u7403\">\u7bee\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u8db3\u7403\">\u8db3\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u6392\u7403\">\u6392\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u7fbd\u6bdb\u7403\">\u7fbd\u6bdb\u7403 // </label></td> // </tr> if ( \"hobby\" . equals ( name )) { //String name = fileItem.getFieldName(); String hobbyValue = fileItem . getString ( \"UTF-8\" ); hobbylist . add ( hobbyValue ); hobbyValue = hobbylist . toString (). substring ( 1 , hobbylist . toString (). length () - 1 ); // [xxx,yyy] --> xxx,yyy System . out . println ( name + \" \" + hobbylist ); //\u6253\u5370ArryList //\u5c06\u7231\u597d\u7684\u6570\u636e\u5b58\u5165\u5230Map\u96c6\u5408\u5f53\u4e2d map . put ( name , hobbyValue ); } else { //\u975e\u590d\u9009\u6846\u7684\u653e\u5165\u5230Map\u96c6\u5408\u5f53\u4e2d map . put ( name , value ); } } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } System . out . println ( map ); //\u5c01\u88c5\u6570\u636e\u5230User\u5f53\u4e2d User user = new User (); user . setUsername ( map . get ( \"username\" )); user . setPassword ( map . get ( \"password\" )); user . setNickname ( map . get ( \"nickname\" )); user . setSex ( map . get ( \"sex\" )); user . setHobby ( map . get ( \"password\" )); //\u5c06\u6ce8\u518c\u7528\u6237\u7684\u4fe1\u606f\u5b58\u5165\u5230List\u96c6\u5408\u5f53\u4e2d\uff1a //\u5c06\u83b7\u5f97\u7684ServletContext\u5bf9\u8c61\uff1a\u5148\u53d6\u51fa\u6765\u96c6\u5408\uff0c\u5f80\u91cc\u9762\u6dfb\u52a0user\u540e\uff0c\u518d\u653e\u8fdb\u53bb---\u518d\u5230InitServlet.java\u5f53\u4e2drefactor toString List < User > userlist = ( List < User >) this . getServletContext (). getAttribute ( \"list\" ); userlist . add ( user ); for ( User u : userlist ) { System . out . println ( u ); } this . getServletContext (). setAttribute ( \"list\" , userlist ); } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } \u6587\u4ef6\u4e0a\u4f20\u540d\u79f0\u4e0d\u53ef\u4ee5\u91cd\u590d \u968f\u673a\u5b57\u7b26\u4e32\u7684\u751f\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package com.imooc.utils ; import java.util.UUID ; public class UploadUtils { /* * \u751f\u6210\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff1b */ public static String getUUIDFileName ( String fileName ) { return ; } public static void main ( String [] args ) { System . out . println ( UUID . randomUUID ()); //7e7e6ff9-578e-499e-92ff-39d199d06092 } } \u6b63\u5f0f\u751f\u6210\u6587\u4ef6\u540d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.imooc.utils ; import java.util.UUID ; public class UploadUtils { /* * \u751f\u6210\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff1b */ public static String getUUIDFileName ( String fileName ) { // \u5c06\u6587\u4ef6\u540d\u7684\u524d\u9762\u90e8\u5206\u8fdb\u884c\u622a\u53d6\uff1axx.jpg --> .jpg int idx = fileName . lastIndexOf ( \".\" ); //\u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u503c\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e String extension = fileName . substring ( idx ); //\u62d3\u5c55\u540d String uuidFileName = UUID . randomUUID (). toString (). replaceAll ( \"-\" , \"\" ) + extension ; // return uuidFileName ; } public static void main ( String [] args ) { System . out . println ( getUUIDFileName ( \"1.jpg\" )); //777b455a815b4eee87771f0568b29500.jpg } }","title":"Web \u5b9e\u73b0\u767b\u5f55\u6ce8\u518c\u529f\u80fd"},{"location":"Linux/AWK/","text":"\u6587\u672c\u67e5\u627e\u4e0e\u5904\u7406\u5de5\u5177 1 2 3 4 5 6 7 8 9 10 11 12 13 awk '{print [$1,$2]}' filename.txt #print 1 2 \u5217 awk '{print [$1 \"\\t\" $2]}' filename.txt #\u6392\u5217\u6574\u9f50 $0\u9ed8\u8ba4\u7684\u6574\u884c record --> \u6a2a\u884c field --> \u7ad6\u884c number of record / field NR / NF awk '{print [NR $1 \"\\t\" $2]}' filename.txt awk '$1==\"gold\"{print $0}' filename.txt #\u5c06\u7b2c\u4e00\u5217\u4e3agold\u7684\u6253\u5370\u51fa\u6765 \u8f93\u51fa\u7b2c\u4e03\u884c\uff1a awk 'NR==7{print}' filename.txt awk '{print $1,$2}' --> \u4ea4\u4e92\u5f0f ! []( http://pdqq4cby3.bkt.clouddn.com/15364825206096.jpg ) \u9ed8\u8ba4\u5206\u9694\u7b26\u2192space \u4fee\u6539\u9ed8\u8ba4\u5206\u9694\u7b26\u2192 awk 'BEGIN{FS=\",\"}{print 1, 1, 2}'#ofs \u2192\u8f93\u51fa\u5206\u9694\u7b26 awk '{$3=\"xxxx\";print NR \"\\t\" $0}' filename \u8f93\u51fa\u6bcf\u4e00\u884c\u7684\u6700\u540e\u4e00\u5217 AWK\u4f5c\u4e3a\u7f16\u7a0b\u8bed\u8a00\u8fd8\u53ef\u4ee5\u8fdb\u884c\u8ba1\u7b97(\u81ea\u52a8\u8bc6\u522b\u6570\u636e\u7c7b\u578b)\u2192\u5148\u8fdb\u884c\u6570\u5b57\u8ba1\u7b97\u518d\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5","title":"awk"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/","text":"File \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 head a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u524d8\u884c tail a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u540e8\u884c --------------wc \u7edf\u8ba1------------------ wc a.txt 6 5 40 a.txt ##\u8868\u793a\u663e\u793a \u884c\u6570 \u5355\u8bcd\u6570 \u5b57\u7b26\u6570 \u6587\u4ef6\u540d wc -w(word) -l(line) -c(\u5b57\u7b26\u6570) a.txt ##\u5355\u7eaf\u663e\u793a\u5355\u8bcd\u6570 5 a.txt ----------------\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c------------------------ rm -rf filename.txt ##remove the file -f\uff1a\u5f3a\u5236\u5220\u9664\uff0c\u5ffd\u7565\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\uff0c\u4ece\u4e0d\u7ed9\u51fa\u63d0\u793a\u3002 -i\uff1a\u4ea4\u4e92\u6a21\u5f0f\u5220\u9664\u6587\u4ef6\uff0c\u5220\u9664\u6587\u4ef6\u524d\u7ed9\u51fa\u63d0\u793a\u3002 -r\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -R\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -v\uff1a\u663e\u793a\u8fd0\u884c\u65f6\u8be6\u7ec6\u4fe1\u606f mkdir file mv file1.txt file2.txt ##change the filename mv file1.txt CTutorial/ ##move to another filefolder less file1.txt ##browser ------------------------grep \u67e5\u627e----------------------------------- grep \u67e5\u627e\u5b57\u7b26 filename -->\u7ea2\u8272\u8fd4\u56de grep l* filename.txt --> 0~n\u6b21 grep ll* filename.txt --> \u81f3\u5c11\u51fa\u73b01\u6b21\uff08\u5e26l\u7684\u90fd\u88ab\u627e\u51fa\u6765\u4e86\uff09 grep ^H filename.txt --> \u4ee5H\u5b57\u6bcd\u5f00\u5934\u7684 grep ab.d a.txt --> .\u4ee3\u8868\u4efb\u610f\u5b57\u7b26 abcdef abaddfadf abddggfgf grep [Aa]b.d a.txt -->\u4ee3\u8868\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5\u751a\u81f3 --> grep [A-Za-z] filename.txt abcdef abaddfadf Abddggfgf [\u7efc\u5408\u5e94\u7528] grep [A-Za-z]b.d a.txt abcdef abaddfadf cbddggfgf --------------------wc + grep -------------------- ![](http://pdqq4cby3.bkt.clouddn.com/15361425196772.jpg) chmod \u6743\u9650\u00b7\u547d\u4ee4\u76f8\u5173 \u00b6 chmod\u7684\u547d\u4ee4\u76f8\u5173 1 2 3 chmod u+r file.txt chmod go-r file.txt chmod \u7684\u4e8c\u8fdb\u5236\u8868\u793a Linux Shell Script \u00b6 > redirect \u628a\u8f93\u51fa\u6253\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u00b7\u628a\u8f93\u5165\u4ece\u6587\u4ef6\u91cc\u8bfb\u51fa\u6765 \u4f7f\u7528$ sh init.sh \u6765\u6267\u884c\u811a\u672c\u6587\u4ef6 variable \u53d8\u91cf echo Linux\u91cc\u7684\u53d8\u91cf\u811a\u672c\u91cc 1 2 3 4 5 a = 10 #\u4e0d\u53ef\u4ee5\u6253\u7a7a\u683c echo $a #\u8f93\u51faa \u201c$\u201d\u8d4b\u503c\u65f6 \u8bfb\u53d6\u65f6 echo \"Hello World\" $a echo Hello World $a #\u53ef\u4e0d\u5199\u53cc\u5f15\u53f7 expr \u8ba1\u7b97\u5f0f\u5b50 + - * / 1 2 3 4 5 a = 1 b = 2 c = ` expr $a + $b ` #y\u8fd0\u7b97\u7b26\u5de6\u53f3\u5fc5\u987b\u52a0\u7a7a\u683c d = ` expr $a \\* $b ` echo $c if \u6bd4\u8f83\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if [] then ... else ... fi > -gt greater than < -lt less than > = -ge greater or equal < = -le less or equal ! = -ne not equal == -eq equal a = 1 b = 2 if [ $a -gt $b ] then echo $a else echo $b fi for while \u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 for x in 1 2 3 4 5 do echo $x done x = 1 while [ $x -le 10 ] do echo $x x = ` expr $x + 1 ` done \u5b57\u7b26\u4e32 string echo \"123\" == echo 123 1 2 3 4 5 6 7 8 9 10 11 password = \"12345678\" echo \"Please input password:\" read userpassword if [ $userpassword -eq $password ] #\u201c=\u201d\u4e5f\u53ef then echo \"password is correct!\" else echo \"password is incorrect!!\" fi if [ -z $str1] #\u68c0\u6d4b\u662f\u5426\u4e3a\u7a7a -n (not zero) inputStream & outputStream 1 2 3 4 5 6 7 8 9 echo \"Please input a:\" read a echo \"Please input b:\" read b c = ` expr $a + $b ` echo $a + $b = $c Arry must be runned by terminal bash (not sh) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 arr =( 7 8 9 10 ) echo ${ arr [1] } #8 #\u6253\u5370\u6240\u6709\u7684\u5143\u7d20 arr =( 7 8 9 10 ) for i in ${ arr [@] } do sum = ` expr $sum + $i ` done echo $sum arr =( 7 8 9 10 ) #\u9009\u51fa\u6700\u5927\u5143\u7d20 max = ${ arr [0] } for i in ${ arr [@] } do if [ $i -gt $max ] then max = $i fi done echo $max Linux\u5168\u5c40\u53d8\u91cf\u00b7\u547d\u4ee4\u5de5\u5177\u96c6 \u00b6 ##global varies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 echo $USER HOME \u4ee3\u8868\u7528\u6237\u4e3b\u76ee\u5f55 cd ~ --> cd $HOME #\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e(\u610f\u4e49\u5728\u4e8e-->\u52a0\u5165\u5230\u73af\u5883\u53d8\u91cf\u5f53\u4e2d\u7684\u6587\u4ef6\u5728\u4efb\u610f\u7684\u8def\u5f84\u4e0b\u90fd\u53ef\u4ee5\u8fd0\u884c)\uff1a[LINUX\u5f53\u4e2d\u7528\u5192\u53f7\u6765\u9694\u5f00] parallels@parallels-vm:~$ PATH = $PATH :/filefoldername #ZIP\u538b\u7f29 zip zipfilename.zip * zip workspace.zip -r workspace/* #\u6240\u6709\u7684\u6587\u4ef6\u90fd\u6309\u7167\u539f\u6765\u7684\u6587\u4ef6\u7ed3\u6784\u538b\u7f29 ! []( http://pdqq4cby3.bkt.clouddn.com/15364756086386.jpg ) tar -zcvf CTut.tar.gz directory/ #-z use gzip program #-c create archive #-v display progress while creating archive #-f archieve file name \u76f4\u63a5\u53cc\u51fb\u5c31\u53ef\u4ee5\u89e3\u538b\u6216\u8005unzip zipfilename.zip tar -zxvf filename.tar.gz #\u6587\u4ef6\u4e0b\u8f7d wget URL [ -O filename.tar.gz ]","title":"Linux\u57fa\u672c\u547d\u4ee4"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 head a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u524d8\u884c tail a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u540e8\u884c --------------wc \u7edf\u8ba1------------------ wc a.txt 6 5 40 a.txt ##\u8868\u793a\u663e\u793a \u884c\u6570 \u5355\u8bcd\u6570 \u5b57\u7b26\u6570 \u6587\u4ef6\u540d wc -w(word) -l(line) -c(\u5b57\u7b26\u6570) a.txt ##\u5355\u7eaf\u663e\u793a\u5355\u8bcd\u6570 5 a.txt ----------------\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c------------------------ rm -rf filename.txt ##remove the file -f\uff1a\u5f3a\u5236\u5220\u9664\uff0c\u5ffd\u7565\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\uff0c\u4ece\u4e0d\u7ed9\u51fa\u63d0\u793a\u3002 -i\uff1a\u4ea4\u4e92\u6a21\u5f0f\u5220\u9664\u6587\u4ef6\uff0c\u5220\u9664\u6587\u4ef6\u524d\u7ed9\u51fa\u63d0\u793a\u3002 -r\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -R\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -v\uff1a\u663e\u793a\u8fd0\u884c\u65f6\u8be6\u7ec6\u4fe1\u606f mkdir file mv file1.txt file2.txt ##change the filename mv file1.txt CTutorial/ ##move to another filefolder less file1.txt ##browser ------------------------grep \u67e5\u627e----------------------------------- grep \u67e5\u627e\u5b57\u7b26 filename -->\u7ea2\u8272\u8fd4\u56de grep l* filename.txt --> 0~n\u6b21 grep ll* filename.txt --> \u81f3\u5c11\u51fa\u73b01\u6b21\uff08\u5e26l\u7684\u90fd\u88ab\u627e\u51fa\u6765\u4e86\uff09 grep ^H filename.txt --> \u4ee5H\u5b57\u6bcd\u5f00\u5934\u7684 grep ab.d a.txt --> .\u4ee3\u8868\u4efb\u610f\u5b57\u7b26 abcdef abaddfadf abddggfgf grep [Aa]b.d a.txt -->\u4ee3\u8868\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5\u751a\u81f3 --> grep [A-Za-z] filename.txt abcdef abaddfadf Abddggfgf [\u7efc\u5408\u5e94\u7528] grep [A-Za-z]b.d a.txt abcdef abaddfadf cbddggfgf --------------------wc + grep -------------------- ![](http://pdqq4cby3.bkt.clouddn.com/15361425196772.jpg)","title":"File"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#chmod","text":"chmod\u7684\u547d\u4ee4\u76f8\u5173 1 2 3 chmod u+r file.txt chmod go-r file.txt chmod \u7684\u4e8c\u8fdb\u5236\u8868\u793a","title":"chmod \u6743\u9650\u00b7\u547d\u4ee4\u76f8\u5173"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#linux-shell-script","text":"> redirect \u628a\u8f93\u51fa\u6253\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u00b7\u628a\u8f93\u5165\u4ece\u6587\u4ef6\u91cc\u8bfb\u51fa\u6765 \u4f7f\u7528$ sh init.sh \u6765\u6267\u884c\u811a\u672c\u6587\u4ef6 variable \u53d8\u91cf echo Linux\u91cc\u7684\u53d8\u91cf\u811a\u672c\u91cc 1 2 3 4 5 a = 10 #\u4e0d\u53ef\u4ee5\u6253\u7a7a\u683c echo $a #\u8f93\u51faa \u201c$\u201d\u8d4b\u503c\u65f6 \u8bfb\u53d6\u65f6 echo \"Hello World\" $a echo Hello World $a #\u53ef\u4e0d\u5199\u53cc\u5f15\u53f7 expr \u8ba1\u7b97\u5f0f\u5b50 + - * / 1 2 3 4 5 a = 1 b = 2 c = ` expr $a + $b ` #y\u8fd0\u7b97\u7b26\u5de6\u53f3\u5fc5\u987b\u52a0\u7a7a\u683c d = ` expr $a \\* $b ` echo $c if \u6bd4\u8f83\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if [] then ... else ... fi > -gt greater than < -lt less than > = -ge greater or equal < = -le less or equal ! = -ne not equal == -eq equal a = 1 b = 2 if [ $a -gt $b ] then echo $a else echo $b fi for while \u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 for x in 1 2 3 4 5 do echo $x done x = 1 while [ $x -le 10 ] do echo $x x = ` expr $x + 1 ` done \u5b57\u7b26\u4e32 string echo \"123\" == echo 123 1 2 3 4 5 6 7 8 9 10 11 password = \"12345678\" echo \"Please input password:\" read userpassword if [ $userpassword -eq $password ] #\u201c=\u201d\u4e5f\u53ef then echo \"password is correct!\" else echo \"password is incorrect!!\" fi if [ -z $str1] #\u68c0\u6d4b\u662f\u5426\u4e3a\u7a7a -n (not zero) inputStream & outputStream 1 2 3 4 5 6 7 8 9 echo \"Please input a:\" read a echo \"Please input b:\" read b c = ` expr $a + $b ` echo $a + $b = $c Arry must be runned by terminal bash (not sh) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 arr =( 7 8 9 10 ) echo ${ arr [1] } #8 #\u6253\u5370\u6240\u6709\u7684\u5143\u7d20 arr =( 7 8 9 10 ) for i in ${ arr [@] } do sum = ` expr $sum + $i ` done echo $sum arr =( 7 8 9 10 ) #\u9009\u51fa\u6700\u5927\u5143\u7d20 max = ${ arr [0] } for i in ${ arr [@] } do if [ $i -gt $max ] then max = $i fi done echo $max","title":"Linux Shell Script"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#linux","text":"##global varies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 echo $USER HOME \u4ee3\u8868\u7528\u6237\u4e3b\u76ee\u5f55 cd ~ --> cd $HOME #\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e(\u610f\u4e49\u5728\u4e8e-->\u52a0\u5165\u5230\u73af\u5883\u53d8\u91cf\u5f53\u4e2d\u7684\u6587\u4ef6\u5728\u4efb\u610f\u7684\u8def\u5f84\u4e0b\u90fd\u53ef\u4ee5\u8fd0\u884c)\uff1a[LINUX\u5f53\u4e2d\u7528\u5192\u53f7\u6765\u9694\u5f00] parallels@parallels-vm:~$ PATH = $PATH :/filefoldername #ZIP\u538b\u7f29 zip zipfilename.zip * zip workspace.zip -r workspace/* #\u6240\u6709\u7684\u6587\u4ef6\u90fd\u6309\u7167\u539f\u6765\u7684\u6587\u4ef6\u7ed3\u6784\u538b\u7f29 ! []( http://pdqq4cby3.bkt.clouddn.com/15364756086386.jpg ) tar -zcvf CTut.tar.gz directory/ #-z use gzip program #-c create archive #-v display progress while creating archive #-f archieve file name \u76f4\u63a5\u53cc\u51fb\u5c31\u53ef\u4ee5\u89e3\u538b\u6216\u8005unzip zipfilename.zip tar -zxvf filename.tar.gz #\u6587\u4ef6\u4e0b\u8f7d wget URL [ -O filename.tar.gz ]","title":"Linux\u5168\u5c40\u53d8\u91cf\u00b7\u547d\u4ee4\u5de5\u5177\u96c6"},{"location":"Linux/MIPS Language/","text":"simple language rules printf_int 1 2 3 4 5 6 7 8 9 10 11 li $1,1 add $t0,$1,2 # $t0 = $t1 + 2 #printf(\"%d\", t0); # $v0 = 1, syscall -> print_int(t0) # $v0 = 4, syscall -> print_string move $a0, $t0 li $v0, 1 syscall printf_string 1 2 3 4 5 6 7 .data msg: .ascii \"Hello World\" .text la $a0, msg li $v0, 4 syscall","title":"MIPS Language"},{"location":"Linux/OS/","text":"\u5f62\u8c61\u6bd4\u55bb 1 \u786c\u4ef6\u5b9e\u73b0\u5c0f\u7684\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u6784\u6210\u6307\u4ee4\u96c6\uff0c\u751f\u6210\u8f6f\u4ef6","title":"OS"},{"location":"MATLAB/Analog Integration Design lab2 Report/","text":"LAB2_REPORT \u00b6 experiment requirement \u00b6 Learn how to perform ac and pz simulations on your circuit. Master the method of obtaining the zero and pole of a circuit from Bode plot and pz analysis. Analyze the difference between experimental data and calculated data. Strengthen the mastery of knowledge related to poles and poles. the implementation and optimization steps \u00b6 First observe the code of dnn.cpp, dnn.h and dnn_test.cpp, know that dnn_test.cpp reads the weight matrix and offset matrix that have been obtained before from the file, and also reads the picture information from the test image. Dnn function. First modify the path, use dnn_test.cpp to open the file correctly. The data type used by the function in the .dnn.h file is all defined as float. In dnn.cpp, first write the code for the initial calculation label according to the instructions of ppt. Create a project with dnn.cpp as the top file and dnn_test.cpp as the testbench. Perform a C-simulation and find that the correct rate is 97 percent, which proves that the code is written correctly. Perform the synthesis and find that the interval is very large, which is 85930. Modify dnn.h to change the floating point to ap_fixed <8,3,AP_RND,AP_SAT>. (This is defined by first fixing the last two parameters, modifying the first two parameters until the correct rate is higher than 90% and the number of bits used is the least). Further synthesis, the interval was found to be 33,142. Modify the code: First, I switched the inner loop with the outer loop so that when the inner loop was forced to be unrolled during pipelining, the interval could be smaller as the interval is closely related to the length of the unrolled loop; second, I broke some original loops into separate loops so that the operations were performed only in the inner loop, which made my loops perfect or semi-perfect as stated in 01_Class_Intro_hls-2018-full.pdf. Add directives: 1. I added dataflow to function dnn, which allows loops to operate concurrently. 2. I tried to use array partition to allow multiple data to be read from a certain array simultaneously so that the pipeline could be more effective. 3. I tried to add resource directive to the arrays to make use of ROM_2P_BRAM, which did not have any effect. 4. Add pipeline directive to all the loops. After 8 and 9, the Interval was finally decreased to 276, but the latency and interval was quite close to each other, which means the dataflow actually did not work, and the simulation is not correct (when applying C/RTL-Cosimulation, the latency and interval were about 350). Synthesize again, resulting in an incubation period of 335. Add partitions to the hidden and output arrays. The time obtained is 237, which is less than 250. However, the wait and the interval are not much different, which means that the data flow does not work and the simulation result is incorrect. Remove the data stream. Since the resources are sufficient, all the arrays are directly partitioned, which makes the pipeline more convenient. Modify the instruction to retain the loop of the loop in which the two matrices are multiplied, and the rest of the loop is expanded, because the other loops are relatively small, which can further increase the throughput rate. The synthesis is carried out again, and the time interval is 245, which satisfies the requirements. Resource analysis \u00b6 Since I broke the loop where input_image was multiplied with w1, the total dsp usage was 74=32+32+10, which indicates the number of multipliers used. experimental summary The project\u2019s interval was reduced to 276 after rewriting the code and applying dataflow, array partition and pipeline directive to it. The result shows that sometimes the hls may make errors, so we should not just rely on the result of the simulation when designing.","title":"Analog_lab2"},{"location":"MATLAB/Analog Integration Design lab2 Report/#lab2_report","text":"","title":"LAB2_REPORT"},{"location":"MATLAB/Analog Integration Design lab2 Report/#experiment-requirement","text":"Learn how to perform ac and pz simulations on your circuit. Master the method of obtaining the zero and pole of a circuit from Bode plot and pz analysis. Analyze the difference between experimental data and calculated data. Strengthen the mastery of knowledge related to poles and poles.","title":"experiment requirement"},{"location":"MATLAB/Analog Integration Design lab2 Report/#the-implementation-and-optimization-steps","text":"First observe the code of dnn.cpp, dnn.h and dnn_test.cpp, know that dnn_test.cpp reads the weight matrix and offset matrix that have been obtained before from the file, and also reads the picture information from the test image. Dnn function. First modify the path, use dnn_test.cpp to open the file correctly. The data type used by the function in the .dnn.h file is all defined as float. In dnn.cpp, first write the code for the initial calculation label according to the instructions of ppt. Create a project with dnn.cpp as the top file and dnn_test.cpp as the testbench. Perform a C-simulation and find that the correct rate is 97 percent, which proves that the code is written correctly. Perform the synthesis and find that the interval is very large, which is 85930. Modify dnn.h to change the floating point to ap_fixed <8,3,AP_RND,AP_SAT>. (This is defined by first fixing the last two parameters, modifying the first two parameters until the correct rate is higher than 90% and the number of bits used is the least). Further synthesis, the interval was found to be 33,142. Modify the code: First, I switched the inner loop with the outer loop so that when the inner loop was forced to be unrolled during pipelining, the interval could be smaller as the interval is closely related to the length of the unrolled loop; second, I broke some original loops into separate loops so that the operations were performed only in the inner loop, which made my loops perfect or semi-perfect as stated in 01_Class_Intro_hls-2018-full.pdf. Add directives: 1. I added dataflow to function dnn, which allows loops to operate concurrently. 2. I tried to use array partition to allow multiple data to be read from a certain array simultaneously so that the pipeline could be more effective. 3. I tried to add resource directive to the arrays to make use of ROM_2P_BRAM, which did not have any effect. 4. Add pipeline directive to all the loops. After 8 and 9, the Interval was finally decreased to 276, but the latency and interval was quite close to each other, which means the dataflow actually did not work, and the simulation is not correct (when applying C/RTL-Cosimulation, the latency and interval were about 350). Synthesize again, resulting in an incubation period of 335. Add partitions to the hidden and output arrays. The time obtained is 237, which is less than 250. However, the wait and the interval are not much different, which means that the data flow does not work and the simulation result is incorrect. Remove the data stream. Since the resources are sufficient, all the arrays are directly partitioned, which makes the pipeline more convenient. Modify the instruction to retain the loop of the loop in which the two matrices are multiplied, and the rest of the loop is expanded, because the other loops are relatively small, which can further increase the throughput rate. The synthesis is carried out again, and the time interval is 245, which satisfies the requirements.","title":"the implementation and optimization steps"},{"location":"MATLAB/Analog Integration Design lab2 Report/#resource-analysis","text":"Since I broke the loop where input_image was multiplied with w1, the total dsp usage was 74=32+32+10, which indicates the number of multipliers used. experimental summary The project\u2019s interval was reduced to 276 after rewriting the code and applying dataflow, array partition and pipeline directive to it. The result shows that sometimes the hls may make errors, so we should not just rely on the result of the simulation when designing.","title":"Resource analysis"},{"location":"MATLAB/LAB3/","text":"lab3 \u00b6 Experimental goal &requirement \u00b6 Learn to use interrupts. Learn to use dual channel GPIO. Interrupt program design: Capture interrupts from PL BTN0 and BTN1, so that when button 0 (1) is pressed, \"Interrupt valid, Button 0 (1) is pressed\" is output through the UART serial port. After an interrupt is triggered, the second interrupt is not responded within 1 s. Interrupt must be called. Dual channel GPIO design: * Hang four switch buttons (SW0~3) and two button buttons (BTN2, BTN3) on the AXI bus using the same GPIO interface. * On the basis of lab5, the calculation of the counting period is changed to ONE_TENTH* (4bit SW + 2bit BTN). Provide materials \u00b6 Provide materials: Lab3 experimental material: Lab1-Lab5.pdf. Experimental process and optimization \u00b6 Figure 1 Generate a hardware system Figure 2 Add watchdog Figure 3 zynq settings Figure 4 The frequency of the watchdog is about 108MHz, so to make the watchdog generate an interrupt about one second after the start, you need to set the watchdog to countdown to 108000000 times. Figure 5 gpio settings (interrupt button) Figure 6 gpio dual channel settings (2-digit buttons and 4-digit dial switches). Experimental analysis \u00b6 Finally, the interrupt is successfully called to capture the interrupts from PL BTN0 and BTN1, so that when the button 0 (1) is pressed, the \"Interrupt valid, Button 0 (1) is pressed\" is output through the UART serial port, and after an interrupt trigger is implemented, within 1 s. Does not respond to the second interrupt. The dual-channel GPIO design successfully changed the count period calculation to ONE_TENTH* (4bit SW + 2bit BTN), and used the same GPIO interface for the four switch buttons (SW0~3) and the two button buttons (BTN2, BTN3). In summary, the experiment was successful. Experimental summary and thoughts \u00b6 In this experiment, the main function first initializes each button, LED and interrupt, and sets the countdown of the watchdog, and then uses the while(1) loop to read the dial switch and the button value in the dual channel gpio and correspondingly Switch, etc. Each time the key value changes, the interrupt processing function BTN_handler is entered. In the handler, the valid interrupt is pressed according to the key value, and the key interrupt is turned off, and the watchdog is restarted. The watchdog will then generate an interrupt after one second, re-enabling the key interrupt in that interrupt, and a new interrupt can be generated after one second. Experiment results \u00b6 Finally, add the watchdog code. Now find the system.mss document, open the example to find an example of using the watchdog interrupt, follow the modification, and add the code to re-enable the key interrupt in the handler. code \u00binclude \"xparameters.h\" #include \"xscugic.h\" #include \"xil_exception.h\" #include \"xgpio.h\" #include \"xscutimer.h\" #include \"xscuwdt.h\" #include \"led_ip.h\" // Parameter definitions #define WDT_DEVICE_ID XPAR_SCUWDT_0_DEVICE_ID #define INTC_DEVICE_ID XPAR_PS7_SCUGIC_0_DEVICE_ID #define LED_DEVICE_ID XPAR_LED_IP_DEVICE_ID #define BTNS_DEVICE_ID XPAR_BUTTONS_DEVICE_ID #define INT_DEVICE_ID XPAR_GPIO_0_DEVICE_ID #define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR #define BTN_INT XGPIO_IR_CH1_MASK // This is the interrupt mask for channel one #define DELAY 100000000 #define ONE_TENTH 37500000 // half of the CPU clock speed/10 #define WDT_IRPT_INTR XPAR_SCUWDT_INTR #define HANDLER_CALLED 0xFFFFFFFF #define WDT_LOAD_VALUE 108000000 XGpio LED ; XGpio BTNInst ; XGpio INTBInst ; XScuGic INTCInst ; XScuTimer Timer ; XScuTimer * TimerInstancePtr ; XGpio intb ; XScuWdt WdtInstance ; /* Cortex SCU Private WatchDog Timer Instance */ XScuGic IntcInstance ; /* Interrupt Controller Instance */ volatile u32 HandlerCalled ; /* flag is set when timeout interrupt occurs */ //---------------------------------------------------- // PROTOTYPE FUNCTIONS //---------------------------------------------------- static void BTN_Intr_Handler ( void * baseaddr_p ); static int InterruptSystemSetup ( XScuGic * XScuGicInstancePtr ); static int IntcInitFunction ( u16 DeviceId , XGpio * GpioInstancePtr ); int ScuWdtIntrExample ( XScuGic * IntcInstancePtr , XScuWdt * WdtInstancePtr , u16 WdtDeviceId , u16 WdtIntrId ); static void WdtIntrHandler ( void * CallBackRef ); static int WdtSetupIntrSystem ( XScuGic * IntcInstancePtr , XScuWdt * WdtInstancePtr , u16 WdtIntrId ); static void WdtDisableIntrSystem ( XScuGic * IntcInstancePtr , u16 WdtIntrId ); //---------------------------------------------------- // INTERRUPT SERVICE ROUTINE(ISR) //also know as : INTERRUPT HANDLER FUNCTION // - called by the buttons interrupt, performs push buttons read //---------------------------------------------------- void BTN_Intr_Handler ( void * InstancePtr ) { int intb_check = XGpio_DiscreteRead ( & intb , 1 ); if ( intb_check == 1 ) xil_printf ( \"Interrupt valid, Button 0 is pressed \\r\\n \" ); else if ( intb_check == 2 ) xil_printf ( \"Interrupt valid, Button 1 is pressed \\r\\n \" ); // Acknowledge GPIO interrupts ( void ) XGpio_InterruptClear ( & INTBInst , BTN_INT ); // Enable GPIO interrupts XGpio_InterruptDisable ( & INTBInst , BTN_INT ); //XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*10); //while(!XScuTimer_IsExpired(TimerInstancePtr)){ //} XScuWdt_RestartWdt ( & WdtInstance ); } //---------------------------------------------------- // MAIN FUNCTION //---------------------------------------------------- int main ( void ) { XGpio dip , push ; int psb_check , psb_check_prev , dip_check , dip_check_prev , count , status ; // \u2265\u0131 \u00ba\u00aa\u00d8SWITCHES,BUTTONS,\u222b\u00d5INTERRUPT status = XGpio_Initialize ( & BTNInst , BTNS_DEVICE_ID ); if ( status != XST_SUCCESS ) return XST_FAILURE ; status = XGpio_Initialize ( & INTBInst , INT_DEVICE_ID ); if ( status != XST_SUCCESS ) return XST_FAILURE ; //\u2265\u0131 \u00ba\u00aa\u00d8LED status = XGpio_Initialize ( & LED , LED_DEVICE_ID ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // \u2265\u0131 \u00ba\u00aa\u00d8\u00f7\u2013\u2202\u0153\u00f8\u00ff\u00f7\u2206\u2206\u02dc status = IntcInitFunction ( INTC_DEVICE_ID , & INTBInst ); if ( status != XST_SUCCESS ) return XST_FAILURE ; //\u2265\u0131 \u00ba\u00aa\u00d8watchdog XScuWdt_Config * ConfigPtr2 ; /* * Initialize the SCU Private Wdt driver so that it is ready to use. */ ConfigPtr2 = XScuWdt_LookupConfig ( WDT_DEVICE_ID ); /* * This is where the virtual address would be used, this example * uses physical address. */ status = XScuWdt_CfgInitialize ( & WdtInstance , ConfigPtr2 , ConfigPtr2 -> BaseAddr ); if ( status != XST_SUCCESS ) { return XST_FAILURE ; } XScuWdt_SetTimerMode ( & WdtInstance ); /* * Load the watchdog counter register. */ XScuWdt_LoadWdt ( & WdtInstance , WDT_LOAD_VALUE ); status = WdtSetupIntrSystem ( & IntcInstance , & WdtInstance , WDT_IRPT_INTR ); if ( status != XST_SUCCESS ) { return XST_FAILURE ; } XScuWdt_RestartWdt ( & WdtInstance ); /* * Start the ScuWdt device. */ XScuWdt_Start ( & WdtInstance ); // PS Timer related definitions XScuTimer_Config * ConfigPtr ; XScuTimer * TimerInstancePtr = & Timer ; xil_printf ( \"-- Start of the Program -- \\r\\n \" ); XGpio_Initialize ( & push , XPAR_BUTTONS_DEVICE_ID ); XGpio_SetDataDirection ( & push , 1 , 0xffffffff ); XGpio_Initialize ( & push , XPAR_BUTTONS_DEVICE_ID ); XGpio_SetDataDirection ( & push , 2 , 0xffffffff ); XGpio_Initialize ( & intb , XPAR_GPIO_0_DEVICE_ID ); XGpio_SetDataDirection ( & intb , 1 , 0xffffffff ); count = 0 ; // Initialize the timer ConfigPtr = XScuTimer_LookupConfig ( XPAR_PS7_SCUTIMER_0_DEVICE_ID ); status = XScuTimer_CfgInitialize ( TimerInstancePtr , ConfigPtr , ConfigPtr -> BaseAddr ); if ( status != XST_SUCCESS ){ xil_printf ( \"Timer init() failed \\r\\n \" ); return XST_FAILURE ; } // Read dip switch values dip_check_prev = XGpio_DiscreteRead ( & push , 2 ); psb_check_prev = XGpio_DiscreteRead ( & push , 1 ); // Load timer with delay in multiple of ONE_TENTH XScuTimer_LoadTimer ( TimerInstancePtr , ONE_TENTH * ( dip_check_prev * 4 + psb_check_prev )); // Set AutoLoad mode XScuTimer_EnableAutoReload ( TimerInstancePtr ); // Start the timer XScuTimer_Start ( TimerInstancePtr ); while ( 1 ) while ( 1 ) { // Read push buttons and break the loop if Center button pressed psb_check = XGpio_DiscreteRead ( & push , 1 ); dip_check = XGpio_DiscreteRead ( & push , 2 ); if (( dip_check != dip_check_prev ) || ( psb_check != psb_check_prev )) { //xil_printf(\"DIP Switch Status %x, %x\\r\\n\", psb_check_prev, psb_check); dip_check_prev = dip_check ; psb_check_prev = psb_check ; // load timer with the new switch settings XScuTimer_LoadTimer ( TimerInstancePtr , ONE_TENTH * ( dip_check * 4 + psb_check )); count = 0 ; } if ( XScuTimer_IsExpired ( TimerInstancePtr )) { // clear status bit XScuTimer_ClearInterruptStatus ( TimerInstancePtr ); // output the count to LED and increment the count LED_IP_mWriteReg ( XPAR_LED_IP_S_AXI_BASEADDR , 0 , count ); count ++ ; } } return 0 ; } //---------------------------------------------------- // INTERRUPT SETUP FUNCTIONS //---------------------------------------------------- int IntcInitFunction ( u16 DeviceId , XGpio * GpioInstancePtr ) { XScuGic_Config * IntcConfig ; int status ; // Interrupt controller initialization IntcConfig = XScuGic_LookupConfig ( DeviceId ); status = XScuGic_CfgInitialize ( & INTCInst , IntcConfig , IntcConfig -> CpuBaseAddress ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // Call interrupt setup function status = InterruptSystemSetup ( & INTCInst ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // Register GPIO interrupt handler status = XScuGic_Connect ( & INTCInst , INTC_GPIO_INTERRUPT_ID , ( Xil_ExceptionHandler ) BTN_Intr_Handler , ( void * ) GpioInstancePtr ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // Enable GPIO interrupts XGpio_InterruptEnable ( GpioInstancePtr , 1 ); XGpio_InterruptGlobalEnable ( GpioInstancePtr ); // Enable GPIO interrupts in the controller XScuGic_Enable ( & INTCInst , INTC_GPIO_INTERRUPT_ID ); return XST_SUCCESS ; } int InterruptSystemSetup ( XScuGic * XScuGicInstancePtr ) { // Register GIC interrupt handler Xil_ExceptionRegisterHandler ( XIL_EXCEPTION_ID_INT , ( Xil_ExceptionHandler ) XScuGic_InterruptHandler , XScuGicInstancePtr ); Xil_ExceptionEnable (); return XST_SUCCESS ; } /*****************************************************************************/ /** * * This function sets up the interrupt system such that interrupts can occur * for the device. * * @param IntcInstancePtr is a pointer to the instance of the XScuGic * driver. * @param WdtInstancePtr is a pointer to the instance of XScuWdt driver. * @param WdtIntrId is the Interrupt Id of the XScuWdt device. * * @return XST_SUCCESS if successful, otherwise XST_FAILURE. * * @note None. * ******************************************************************************/ static int WdtSetupIntrSystem ( XScuGic * IntcInstancePtr , XScuWdt * WdtInstancePtr , u16 WdtIntrId ) { int Status ; u32 Reg ; #ifndef TESTAPP_GEN XScuGic_Config * IntcConfig ; /* * Initialize the interrupt controller driver so that it is ready to * use. */ IntcConfig = XScuGic_LookupConfig ( INTC_DEVICE_ID ); if ( NULL == IntcConfig ) { return XST_FAILURE ; } Status = XScuGic_CfgInitialize ( IntcInstancePtr , IntcConfig , IntcConfig -> CpuBaseAddress ); if ( Status != XST_SUCCESS ) { return XST_FAILURE ; } Xil_ExceptionInit (); /* * Connect the interrupt controller interrupt handler to the hardware * interrupt handling logic in the processor. */ Xil_ExceptionRegisterHandler ( XIL_EXCEPTION_ID_INT , ( Xil_ExceptionHandler ) XScuGic_InterruptHandler , IntcInstancePtr ); #endif /* * Connect the device driver handler that will be called when an * interrupt for the device occurs, the handler defined above performs * the specific interrupt processing for the device. */ Status = XScuGic_Connect ( IntcInstancePtr , WdtIntrId , ( Xil_ExceptionHandler ) WdtIntrHandler , ( void * ) WdtInstancePtr ); if ( Status != XST_SUCCESS ) { return Status ; } /* * Enable the watchdog interrupts for timer mode. */ Reg = XScuWdt_GetControlReg ( WdtInstancePtr ); XScuWdt_SetControlReg ( WdtInstancePtr , Reg | XSCUWDT_CONTROL_IT_ENABLE_MASK ); /* * Enable the interrupt for the device. */ XScuGic_Enable ( IntcInstancePtr , WdtIntrId ); #ifndef TESTAPP_GEN /* * Enable interrupts in the Processor. */ Xil_ExceptionEnable (); #endif return XST_SUCCESS ; } /*****************************************************************************/ /** * * This function is the Interrupt handler for the WDT Interrupt of the * Wdt device. It is called on the expiration of the timer counter in * interrupt context. * * @param CallBackRef is a pointer to the callback function. * * @return None. * * @note None. * ******************************************************************************/ static void WdtIntrHandler ( void * CallBackRef ) { /* * WDT timed out and interrupt occurred, let main test loop know. */ XGpio_InterruptEnable ( & INTBInst , BTN_INT ); } /*****************************************************************************/ /** * * This function disables the interrupts that occur for the device. * * @param IntcInstancePtr is the pointer to the instance of XScuGic * driver. * @param WdtIntrId is the Interrupt Id for the device. * * @return None. * * @note None. * ******************************************************************************/ static void WdtDisableIntrSystem ( XScuGic * IntcInstancePtr , u16 WdtIntrId ) { /* * Disconnect and disable the interrupt for the Wdt. */ XScuGic_Disconnect ( IntcInstancePtr , WdtIntrId ); }","title":"vivado"},{"location":"MATLAB/LAB3/#lab3","text":"","title":"lab3"},{"location":"MATLAB/LAB3/#experimental-goal-requirement","text":"Learn to use interrupts. Learn to use dual channel GPIO. Interrupt program design: Capture interrupts from PL BTN0 and BTN1, so that when button 0 (1) is pressed, \"Interrupt valid, Button 0 (1) is pressed\" is output through the UART serial port. After an interrupt is triggered, the second interrupt is not responded within 1 s. Interrupt must be called. Dual channel GPIO design: * Hang four switch buttons (SW0~3) and two button buttons (BTN2, BTN3) on the AXI bus using the same GPIO interface. * On the basis of lab5, the calculation of the counting period is changed to ONE_TENTH* (4bit SW + 2bit BTN).","title":"Experimental goal &amp;requirement"},{"location":"MATLAB/LAB3/#provide-materials","text":"Provide materials: Lab3 experimental material: Lab1-Lab5.pdf.","title":"Provide materials"},{"location":"MATLAB/LAB3/#experimental-process-and-optimization","text":"Figure 1 Generate a hardware system Figure 2 Add watchdog Figure 3 zynq settings Figure 4 The frequency of the watchdog is about 108MHz, so to make the watchdog generate an interrupt about one second after the start, you need to set the watchdog to countdown to 108000000 times. Figure 5 gpio settings (interrupt button) Figure 6 gpio dual channel settings (2-digit buttons and 4-digit dial switches).","title":"Experimental process and optimization"},{"location":"MATLAB/LAB3/#experimental-analysis","text":"Finally, the interrupt is successfully called to capture the interrupts from PL BTN0 and BTN1, so that when the button 0 (1) is pressed, the \"Interrupt valid, Button 0 (1) is pressed\" is output through the UART serial port, and after an interrupt trigger is implemented, within 1 s. Does not respond to the second interrupt. The dual-channel GPIO design successfully changed the count period calculation to ONE_TENTH* (4bit SW + 2bit BTN), and used the same GPIO interface for the four switch buttons (SW0~3) and the two button buttons (BTN2, BTN3). In summary, the experiment was successful.","title":"Experimental analysis"},{"location":"MATLAB/LAB3/#experimental-summary-and-thoughts","text":"In this experiment, the main function first initializes each button, LED and interrupt, and sets the countdown of the watchdog, and then uses the while(1) loop to read the dial switch and the button value in the dual channel gpio and correspondingly Switch, etc. Each time the key value changes, the interrupt processing function BTN_handler is entered. In the handler, the valid interrupt is pressed according to the key value, and the key interrupt is turned off, and the watchdog is restarted. The watchdog will then generate an interrupt after one second, re-enabling the key interrupt in that interrupt, and a new interrupt can be generated after one second.","title":"Experimental summary and thoughts"},{"location":"MATLAB/LAB3/#experiment-results","text":"Finally, add the watchdog code. Now find the system.mss document, open the example to find an example of using the watchdog interrupt, follow the modification, and add the code to re-enable the key interrupt in the handler.","title":"Experiment results"},{"location":"MATLAB/LAB3/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 #include \"xparameters.h\" #include \"xscugic.h\" #include \"xil_exception.h\" #include \"xgpio.h\" #include \"xscutimer.h\" #include \"xscuwdt.h\" #include \"led_ip.h\" // Parameter definitions #define WDT_DEVICE_ID XPAR_SCUWDT_0_DEVICE_ID #define INTC_DEVICE_ID XPAR_PS7_SCUGIC_0_DEVICE_ID #define LED_DEVICE_ID XPAR_LED_IP_DEVICE_ID #define BTNS_DEVICE_ID XPAR_BUTTONS_DEVICE_ID #define INT_DEVICE_ID XPAR_GPIO_0_DEVICE_ID #define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR #define BTN_INT XGPIO_IR_CH1_MASK // This is the interrupt mask for channel one #define DELAY 100000000 #define ONE_TENTH 37500000 // half of the CPU clock speed/10 #define WDT_IRPT_INTR XPAR_SCUWDT_INTR #define HANDLER_CALLED 0xFFFFFFFF #define WDT_LOAD_VALUE 108000000 XGpio LED ; XGpio BTNInst ; XGpio INTBInst ; XScuGic INTCInst ; XScuTimer Timer ; XScuTimer * TimerInstancePtr ; XGpio intb ; XScuWdt WdtInstance ; /* Cortex SCU Private WatchDog Timer Instance */ XScuGic IntcInstance ; /* Interrupt Controller Instance */ volatile u32 HandlerCalled ; /* flag is set when timeout interrupt occurs */ //---------------------------------------------------- // PROTOTYPE FUNCTIONS //---------------------------------------------------- static void BTN_Intr_Handler ( void * baseaddr_p ); static int InterruptSystemSetup ( XScuGic * XScuGicInstancePtr ); static int IntcInitFunction ( u16 DeviceId , XGpio * GpioInstancePtr ); int ScuWdtIntrExample ( XScuGic * IntcInstancePtr , XScuWdt * WdtInstancePtr , u16 WdtDeviceId , u16 WdtIntrId ); static void WdtIntrHandler ( void * CallBackRef ); static int WdtSetupIntrSystem ( XScuGic * IntcInstancePtr , XScuWdt * WdtInstancePtr , u16 WdtIntrId ); static void WdtDisableIntrSystem ( XScuGic * IntcInstancePtr , u16 WdtIntrId ); //---------------------------------------------------- // INTERRUPT SERVICE ROUTINE(ISR) //also know as : INTERRUPT HANDLER FUNCTION // - called by the buttons interrupt, performs push buttons read //---------------------------------------------------- void BTN_Intr_Handler ( void * InstancePtr ) { int intb_check = XGpio_DiscreteRead ( & intb , 1 ); if ( intb_check == 1 ) xil_printf ( \"Interrupt valid, Button 0 is pressed \\r\\n \" ); else if ( intb_check == 2 ) xil_printf ( \"Interrupt valid, Button 1 is pressed \\r\\n \" ); // Acknowledge GPIO interrupts ( void ) XGpio_InterruptClear ( & INTBInst , BTN_INT ); // Enable GPIO interrupts XGpio_InterruptDisable ( & INTBInst , BTN_INT ); //XScuTimer_LoadTimer(TimerInstancePtr, ONE_TENTH*10); //while(!XScuTimer_IsExpired(TimerInstancePtr)){ //} XScuWdt_RestartWdt ( & WdtInstance ); } //---------------------------------------------------- // MAIN FUNCTION //---------------------------------------------------- int main ( void ) { XGpio dip , push ; int psb_check , psb_check_prev , dip_check , dip_check_prev , count , status ; // \u2265\u0131 \u00ba\u00aa\u00d8SWITCHES,BUTTONS,\u222b\u00d5INTERRUPT status = XGpio_Initialize ( & BTNInst , BTNS_DEVICE_ID ); if ( status != XST_SUCCESS ) return XST_FAILURE ; status = XGpio_Initialize ( & INTBInst , INT_DEVICE_ID ); if ( status != XST_SUCCESS ) return XST_FAILURE ; //\u2265\u0131 \u00ba\u00aa\u00d8LED status = XGpio_Initialize ( & LED , LED_DEVICE_ID ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // \u2265\u0131 \u00ba\u00aa\u00d8\u00f7\u2013\u2202\u0153\u00f8\u00ff\u00f7\u2206\u2206\u02dc status = IntcInitFunction ( INTC_DEVICE_ID , & INTBInst ); if ( status != XST_SUCCESS ) return XST_FAILURE ; //\u2265\u0131 \u00ba\u00aa\u00d8watchdog XScuWdt_Config * ConfigPtr2 ; /* * Initialize the SCU Private Wdt driver so that it is ready to use. */ ConfigPtr2 = XScuWdt_LookupConfig ( WDT_DEVICE_ID ); /* * This is where the virtual address would be used, this example * uses physical address. */ status = XScuWdt_CfgInitialize ( & WdtInstance , ConfigPtr2 , ConfigPtr2 -> BaseAddr ); if ( status != XST_SUCCESS ) { return XST_FAILURE ; } XScuWdt_SetTimerMode ( & WdtInstance ); /* * Load the watchdog counter register. */ XScuWdt_LoadWdt ( & WdtInstance , WDT_LOAD_VALUE ); status = WdtSetupIntrSystem ( & IntcInstance , & WdtInstance , WDT_IRPT_INTR ); if ( status != XST_SUCCESS ) { return XST_FAILURE ; } XScuWdt_RestartWdt ( & WdtInstance ); /* * Start the ScuWdt device. */ XScuWdt_Start ( & WdtInstance ); // PS Timer related definitions XScuTimer_Config * ConfigPtr ; XScuTimer * TimerInstancePtr = & Timer ; xil_printf ( \"-- Start of the Program -- \\r\\n \" ); XGpio_Initialize ( & push , XPAR_BUTTONS_DEVICE_ID ); XGpio_SetDataDirection ( & push , 1 , 0xffffffff ); XGpio_Initialize ( & push , XPAR_BUTTONS_DEVICE_ID ); XGpio_SetDataDirection ( & push , 2 , 0xffffffff ); XGpio_Initialize ( & intb , XPAR_GPIO_0_DEVICE_ID ); XGpio_SetDataDirection ( & intb , 1 , 0xffffffff ); count = 0 ; // Initialize the timer ConfigPtr = XScuTimer_LookupConfig ( XPAR_PS7_SCUTIMER_0_DEVICE_ID ); status = XScuTimer_CfgInitialize ( TimerInstancePtr , ConfigPtr , ConfigPtr -> BaseAddr ); if ( status != XST_SUCCESS ){ xil_printf ( \"Timer init() failed \\r\\n \" ); return XST_FAILURE ; } // Read dip switch values dip_check_prev = XGpio_DiscreteRead ( & push , 2 ); psb_check_prev = XGpio_DiscreteRead ( & push , 1 ); // Load timer with delay in multiple of ONE_TENTH XScuTimer_LoadTimer ( TimerInstancePtr , ONE_TENTH * ( dip_check_prev * 4 + psb_check_prev )); // Set AutoLoad mode XScuTimer_EnableAutoReload ( TimerInstancePtr ); // Start the timer XScuTimer_Start ( TimerInstancePtr ); while ( 1 ) while ( 1 ) { // Read push buttons and break the loop if Center button pressed psb_check = XGpio_DiscreteRead ( & push , 1 ); dip_check = XGpio_DiscreteRead ( & push , 2 ); if (( dip_check != dip_check_prev ) || ( psb_check != psb_check_prev )) { //xil_printf(\"DIP Switch Status %x, %x\\r\\n\", psb_check_prev, psb_check); dip_check_prev = dip_check ; psb_check_prev = psb_check ; // load timer with the new switch settings XScuTimer_LoadTimer ( TimerInstancePtr , ONE_TENTH * ( dip_check * 4 + psb_check )); count = 0 ; } if ( XScuTimer_IsExpired ( TimerInstancePtr )) { // clear status bit XScuTimer_ClearInterruptStatus ( TimerInstancePtr ); // output the count to LED and increment the count LED_IP_mWriteReg ( XPAR_LED_IP_S_AXI_BASEADDR , 0 , count ); count ++ ; } } return 0 ; } //---------------------------------------------------- // INTERRUPT SETUP FUNCTIONS //---------------------------------------------------- int IntcInitFunction ( u16 DeviceId , XGpio * GpioInstancePtr ) { XScuGic_Config * IntcConfig ; int status ; // Interrupt controller initialization IntcConfig = XScuGic_LookupConfig ( DeviceId ); status = XScuGic_CfgInitialize ( & INTCInst , IntcConfig , IntcConfig -> CpuBaseAddress ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // Call interrupt setup function status = InterruptSystemSetup ( & INTCInst ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // Register GPIO interrupt handler status = XScuGic_Connect ( & INTCInst , INTC_GPIO_INTERRUPT_ID , ( Xil_ExceptionHandler ) BTN_Intr_Handler , ( void * ) GpioInstancePtr ); if ( status != XST_SUCCESS ) return XST_FAILURE ; // Enable GPIO interrupts XGpio_InterruptEnable ( GpioInstancePtr , 1 ); XGpio_InterruptGlobalEnable ( GpioInstancePtr ); // Enable GPIO interrupts in the controller XScuGic_Enable ( & INTCInst , INTC_GPIO_INTERRUPT_ID ); return XST_SUCCESS ; } int InterruptSystemSetup ( XScuGic * XScuGicInstancePtr ) { // Register GIC interrupt handler Xil_ExceptionRegisterHandler ( XIL_EXCEPTION_ID_INT , ( Xil_ExceptionHandler ) XScuGic_InterruptHandler , XScuGicInstancePtr ); Xil_ExceptionEnable (); return XST_SUCCESS ; } /*****************************************************************************/ /** * * This function sets up the interrupt system such that interrupts can occur * for the device. * * @param IntcInstancePtr is a pointer to the instance of the XScuGic * driver. * @param WdtInstancePtr is a pointer to the instance of XScuWdt driver. * @param WdtIntrId is the Interrupt Id of the XScuWdt device. * * @return XST_SUCCESS if successful, otherwise XST_FAILURE. * * @note None. * ******************************************************************************/ static int WdtSetupIntrSystem ( XScuGic * IntcInstancePtr , XScuWdt * WdtInstancePtr , u16 WdtIntrId ) { int Status ; u32 Reg ; #ifndef TESTAPP_GEN XScuGic_Config * IntcConfig ; /* * Initialize the interrupt controller driver so that it is ready to * use. */ IntcConfig = XScuGic_LookupConfig ( INTC_DEVICE_ID ); if ( NULL == IntcConfig ) { return XST_FAILURE ; } Status = XScuGic_CfgInitialize ( IntcInstancePtr , IntcConfig , IntcConfig -> CpuBaseAddress ); if ( Status != XST_SUCCESS ) { return XST_FAILURE ; } Xil_ExceptionInit (); /* * Connect the interrupt controller interrupt handler to the hardware * interrupt handling logic in the processor. */ Xil_ExceptionRegisterHandler ( XIL_EXCEPTION_ID_INT , ( Xil_ExceptionHandler ) XScuGic_InterruptHandler , IntcInstancePtr ); #endif /* * Connect the device driver handler that will be called when an * interrupt for the device occurs, the handler defined above performs * the specific interrupt processing for the device. */ Status = XScuGic_Connect ( IntcInstancePtr , WdtIntrId , ( Xil_ExceptionHandler ) WdtIntrHandler , ( void * ) WdtInstancePtr ); if ( Status != XST_SUCCESS ) { return Status ; } /* * Enable the watchdog interrupts for timer mode. */ Reg = XScuWdt_GetControlReg ( WdtInstancePtr ); XScuWdt_SetControlReg ( WdtInstancePtr , Reg | XSCUWDT_CONTROL_IT_ENABLE_MASK ); /* * Enable the interrupt for the device. */ XScuGic_Enable ( IntcInstancePtr , WdtIntrId ); #ifndef TESTAPP_GEN /* * Enable interrupts in the Processor. */ Xil_ExceptionEnable (); #endif return XST_SUCCESS ; } /*****************************************************************************/ /** * * This function is the Interrupt handler for the WDT Interrupt of the * Wdt device. It is called on the expiration of the timer counter in * interrupt context. * * @param CallBackRef is a pointer to the callback function. * * @return None. * * @note None. * ******************************************************************************/ static void WdtIntrHandler ( void * CallBackRef ) { /* * WDT timed out and interrupt occurred, let main test loop know. */ XGpio_InterruptEnable ( & INTBInst , BTN_INT ); } /*****************************************************************************/ /** * * This function disables the interrupts that occur for the device. * * @param IntcInstancePtr is the pointer to the instance of XScuGic * driver. * @param WdtIntrId is the Interrupt Id for the device. * * @return None. * * @note None. * ******************************************************************************/ static void WdtDisableIntrSystem ( XScuGic * IntcInstancePtr , u16 WdtIntrId ) { /* * Disconnect and disable the interrupt for the Wdt. */ XScuGic_Disconnect ( IntcInstancePtr , WdtIntrId ); }","title":"code"},{"location":"MATLAB/MATLAB/","text":"matrix laboratory \u8ba1\u7b97\u5de5\u5177 log \u4ee5\u81ea\u7136\u5bf9\u6570\u4e3a\u5e95 log2 \u5e95\u6570 \u53ea\u80fd2\u548c10 \u5176\u4ed6\u7684\u7528\u6362\u5e95\u516c\u5f0f variable \u90fd\u662f\u5185\u5b58\u7684\u4e00\u5757\u7a7a\u95f4 x = 10 meet x + 1 = 2 (false) \"=\" \u2192 \u8d4b\u503c\uff08\u4f1a\u8986\u76d6\u503c\uff09 terminal\u8fd0\u884c\u7c7b\u4f3cLinux \u5411\u91cf vector x = [1,2,3] x = [1 2 3] \u201c;\u201d\u6765\u5206\u884c A.*B \u2192\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u4e58 \u4ea4\u4e92\u5f0f\u8fd0\u884c\u811a\u672c 1 2 3 4 5 6 7 8 9 10 11 12 Input : x = input ( 'Please input x:' ); Output : fprintf ( 'output is %f\\n' , x ) ------------ if\u9009\u62e9 ---------------- num = input ( 'please input a num' ); if num > 22 fprintf ( 'negative' ); elseif ..... else fprintf ( 'positive' ); end disp 1 2 disp ( a ); %\u81ea\u52a8\u52a0\u56de\u8f66 \u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5 disp ([ 'apple' , 'banana' , 'orange' ]); LOOP while 1 2 3 while xxx ...mod --> \u53d6\u4f59 end for 1 2 3 4 5 6 7 8 9 10 11 12 for i = 10 : - 1 : 5 % begin number : decline number : end number disp ( i ); end v = [ 5 7 9 10 13 3 2 1 ] for i = v disp ( i ); end %\u5185\u7f6e\u7684sum\u51fd\u6570 sum ( v ); function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 %n - input parameter / arguments function mysum ( n ) sum = 0 ; for i = 1 : n sum = sum + i ; end disp ( sum ); end ---------------------------------- function result = mysum ( a,b ) %output - result sum = 0 ; for i = a : b sum = sum + i ; end result = sum ; end factor \u7ea6\u6570 1 2 3 4 5 6 7 8 9 10 function result = count_facor ( n ) count = 0 ; for i = 1 : n if mod ( n , i ) == 0 count = count + 1 ; end end result = count ; end is_primer 1 2 3 4 5 6 7 8 9 function result = is_primer ( n ) count = mysum ( n ); if count == 2 result = 1 ; else result = 0 ; end end \u753b\u56fe 1 2 3 4 >> x = - 3 : 0.1 : 3 ; >> y = x .^ 2 ; >> plot ( x , y ) >> 1 >> plot ( x , y , 'green-o' , x , y1 , 'red-*' ) 1 >> axis equal 1 2 3 x = [1 2 3]; y = [10 20 30]; bar(y) 1 2 3 4 grid on ; %\u8868\u793a\u52a0\u7f51\u683c title ( ' xxxxx' ); xlabel ( 'xxxx' ); ylabel ( ' xxxxx' ); 1 subplot(record,field,number_setted); stem \u2192 \u7528\u6cd5\u548cplot\u4e00\u6837\u4f46\u662f\u662f\u706b\u67f4\u6897\u56fe surf & meshgrid 1 2 3 4 5 x = - 3 : 3 ; y = - 3 : 3 ; [ x , y ] = meshgrid ( x , y ); z = x .^ 2 + y .^ 2 ; surf ( x , y , z ) active 1 2 3 4 5 6 7 8 9 10 11 x = - 2 * pi : 0.1 : 2 * pi ; y = sin ( x ); h = plot ( x , y ); while true : x = x + 0.1 ; y = sin ( x ); set ( h , 'XData' , x , 'YData' , y ); drawnow ; end ones\u51fd\u6570 ones(N) - \u751f\u6210N\u884cN\u5217\u4e14\u6240\u6709\u5143\u7d20\u5747\u4e3a1\u7684\u77e9\u9635 \u5377\u79ef \u2192 conv 1 2 3 nx = 0 : 10 ; x = 0.5 .^ nx ; %x[n]\u7528\u6709\u9650\u957f\u8fd1\u4f3c nh = - 1 : 4 ; h = ones ( 1 , length ( nh )); y = conv ( x , h ); stem ([ min ( nx ) + min ( nh ): max ( nx ) + max ( nh )], y ) \u5bf9\u4e8e\u8bf8\u5982spr,exp,log,sin,cos\u7b49\uff0c\u5185\u90e8\u4e0d\u80fd\u7528\u70b9\u4e58","title":"MATLAB"},{"location":"MATLAB/analog/","text":"LAB1_ANALOG \u00b6 \u4e00\u3001\u7b80\u4ecb \u00b6 \u6a21\u62df\u96c6\u6210\u7535\u8def\u8bbe\u8ba1\u8bfe\u7a0b\u7684\u5b9e\u9a8c\uff0c\u5b9e\u9a8c\u5185\u5bb9\u76f8\u5bf9\u4e8e\u4e4b\u540e\u7684\u5b9e\u9a8c\u8fd8\u662f\u6bd4\u8f83\u57fa\u7840\u7684\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u4eff\u771f\u53c2\u6570\u4fee\u6539\u7ed8\u5236mos\u7ba1\u7684\u5404\u79cd\u7279\u6027\u66f2\u7ebf\uff0c\u76ee\u7684\u662f\u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\u719f\u6089 cadence \u7684\u57fa\u672c\u64cd\u4f5c\u73af\u5883\u548c\u4eff\u771f\u7684\u57fa\u672c\u6b65\u9aa4\uff0c\u540c\u65f6\u5bf9mos\u7ba1\u7684\u7279\u6027\u66f2\u7ebf\u6709\u76f4\u89c2\u7684\u7406\u89e3\u3002 \u4e8c\u3001\u5b9e\u9a8c\u8981\u6c42 \u00b6 \u672c\u6b21\u5b9e\u9a8c\u8981\u6c42\u901a\u8fc7\u7ed9\u5b9a\u7684\u53c2\u6570\u548c\u7535\u8def\u56fe\uff0cstep by step\u5730\u642d\u5efa\u4e00\u4e2a\u7b80\u5355\u7684MOS\u7ba1\u7535\u8def\u6a21\u578b\uff0c\u5e76\u8fdb\u884c\u4e00\u4e9b\u57fa\u7840\u4eff\u771f\uff1a 1. \u5206\u522b\u5bf9 pmos \u4e0e nmos \u7ed8\u5236\u5176 Id~Vgs \u7684\u4eff\u771f\u53d8\u5316\u56fe\u3002 2. \u57281.\u7684\u57fa\u7840\u4e0a\u901a\u8fc7\u8c03\u6574\u4e0d\u540c\u7684Vgs\u7ed8\u5236\u51fa\u591a\u6761 Id~Vds \u66f2\u7ebf\u3002 3. \u7ed8\u5236 Vth \u968f\u7740W\u548cL\u53d8\u5316\u7684\u66f2\u7ebf\u3002 \u76f8\u5173\u53c2\u6570\u89c4\u5b9a\uff1a 1. \u7ba1\u5b50\u8bbe\u7f6e\u4e3a W=2u\uff0cL=1u\uff0cVgs=0~1.8V\uff0cVds=0~1.8V \uff08\u5b9e\u9a8c1\u4e2d\u91c7\u7528 Vds=1.8V \uff09 2. \u5728\u505aVth\u66f2\u7ebf\u65f6\uff0c Vds=1.8V\uff0cVgs=0.9V \u3002W\u4eff\u771f\u65f6\uff0c\u8bbe L=1u\uff0cW=1u~10u \u3002L\u4eff\u771f\u65f6\uff0c\u8bbe W= 5u\uff0cL=180n~5u \u3002 \u4e09\u3001\u5b9e\u9a8c\u6b65\u9aa4 \u00b6 set & cellview \u6839\u636e\u7ed9\u51fa\u7684\u5b9e\u9a8c\u7535\u8def\u56fe\u65b0\u5efa cellview \uff0c\u8bbe\u8ba1\u642d\u5efa\u5b9e\u9a8c\u7684\u7535\u8def\u56fe\u3002 \u5177\u4f53\u7684\u7535\u8def\u5c06\u5728\u540e\u9762\u7684\u56fe1\uff0c\u56fe2\u7ed9\u51fa\u3002 set \u5bf9\u5df2\u7ecf\u8bbe\u8ba1\u7684\u597d\u7684\u7535\u8def\u7684\u5404\u9879\u5143\u4ef6\u7684\u53c2\u6570\u8fdb\u884c\u8bbe\u7f6e\u3002 \u5728\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\u5c06\u540e\u9762\u4eff\u771f\u65f6\u8981\u8fdb\u884c\u7684 Vds\uff0cVgs\uff0cW\uff0cL \u7b49\u53c2\u6570\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u540e\u9762\u8fdb\u884c\u53c2\u6570\u4eff\u771f\u65f6\u5019\u7684\u626b\u63cf\u3002 \u5229\u7528ADE_L\u4eff\u771f\u8bbe\u7f6e\u5404\u9879\u53c2\u6570\u7684\u503c\uff0c\u8bbe\u5b9a\u5bf9\u5e94\u7684 output\uff08Ids\uff0cVth\uff09 \uff0c\u5e76\u8fdb\u884c\u5404\u9879\u53c2\u6570\u7684\u4eff\u771f\uff1a 1.\u5728\u5b9e\u9a8c1\u4e2d\u53ef\u4ee5\u76f4\u63a5\u5229\u7528Parametric\u8fdb\u884c\u53c2\u6570\u4eff\u771f\u3002 2.\u5b9e\u9a8c2\u4e2dVds\u53ef\u7531DC\u4eff\u771f\u4e2dSweep Variable\u4e2d\u7684Design Variable\u8bbe\u7f6e\u53d8\u5316\u8303\u56f4\u548c\u7cbe\u5ea6\uff0c\u800c\u53e6\u4e00\u4e2a\u53c2\u6570 Vgs \u53ef\u7531 Parametric Analysis \u8bbe\u7f6e\u53d8\u5316\u8303\u56f4\u3002 3.\u5728\u5b9e\u9a8c3\u4e2d\u8fdb\u884cop\u9009\u9879\u6765\u5f97\u5230mos\u7ba1\u7684Vth\u7684\u65f6\u5019\uff0c\u8981\u5148\u8fdb\u884c\u4e00\u6b21DC\u7684\u7a7a\u4eff\u624d\u53ef\u4ee5\u9009\u62e9mos\u7ba1\u7684op\u8f93\u51fa\u3002 \u56db\u3001\u5b9e\u9a8c\u7ed3\u8bba \u00b6 Conclusion \u56fa\u5b9aVds\uff0c\u7ed8\u5236\u51fa\u7684Ids~Vgs\u56fe\u50cf \u4e0d\u540cVgs\u4e0bIds~Vds\u56fe\u50cf Vth\u4e0eW,L\u7684\u56fe\u50cf \u4eff\u771f\u7ed3\u679c\u5206\u6790 \u5f97\u5230\u7684Vgs\u4e0eVds\u66f2\u7ebf\u4e0e\u7406\u8bba\u503c\u4e0a\u7684\u4e00\u81f4\u3002\u5bf9\u4e8enmos\u6765\u8bf4\uff1a\u5728Vgs\u9010\u6e10\u589e\u5927\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9996\u5148\u5904\u4e8e\u622a\u65adscope\uff0c\u6b64\u65f6mos\u7ba1\u88ab\u5173\u65ad\uff0cIds=0\uff1b\u5728Vgs\u9010\u6e10\u5927\u8fc7Vth\u7684\u65f6\u5019\uff0cmos\u7ba1\u5de5\u4f5c\u5728\u9971\u548c\u533a\uff0c\u6839\u636e\u7535\u6d41\u516c\u5f0f I_ds=1/2 C_ox \u03bc_n W/L \u3016(V_gs-V_th)\u3017^2 \uff0cIds\u5c31\u968f\u7740Vgs\u7684\u589e\u5927\u4e0d\u65ad\u589e\u5927\u3002pmos\u4e0enmos\u7684\u60c5\u51b5\u76f8\u4f3c\uff0c\u53ea\u662f\u5bf9\u5e94\u7684\u7535\u6d41\u4e0e\u7535\u538b\u662f\u8d1f\u503c\uff0c\u7531Vgs=-1.8v~0v\uff0cpmos\u7ba1\u4ece\u9971\u548c\u533a\u53d8\u5230\u622a\u6b62\u3002 \u5728\u53d6\u4e0d\u540c\u7684Vgs\u65f6\u5206\u522b\u7ed8\u5236\u51fa\u4e0d\u540c\u7684Ids Vds\u66f2\u7ebf\u4e0e\u7406\u8bba\u4e0a\u4e00\u81f4\u3002\u5bf9\u4e8enmos\u6765\u8bf4\uff1a\u6bcf\u4e00\u6761Ids Vds\u66f2\u7ebf\uff0c\u968f\u7740Vds\u4e0d\u65ad\u7684\u589e\u5927\uff0cnmos\u7ba1\u7684\u5de5\u4f5c\u72b6\u6001\u5728Vds \u0002wzxhzdk:4\u0003 \u968f\u7740Vds\u7684\u589e\u5927\uff0cIds\u51e0\u4e4e\u5448\u7ebf\u6027\u589e\u957f\uff1b\u5f53Vds>Vgs-Vth\u65f6\uff0c\u5904\u4e8e\u9971\u548c\u533a\uff0c\u5219Ids\u51e0\u4e4e\u4e0d\u968fVds\u53d8\u5316\u800c\u53d8\u5316\u3002\u800c\u5bf9\u4e8e\u4e0d\u540c\u7684Vgs\u5f97\u5230\u7684\u4e0d\u540c\u7684\u66f2\u7ebf\uff0c\u53ef\u4ee5\u770b\u5230\u5728\u76f8\u540c\u7684Vds\u6761\u4ef6\u4e0b\uff0cIds\u4e5f\u968f\u7740Vgs\u7684\u589e\u5927\u800c\u589e\u5927\uff0c\u4e0e\u7406\u8bba\u7535\u6d41\u516c\u5f0f\u4e00\u81f4\u3002 \u8ba1\u7b97C_ox \u03bc_n\u4e0eC_ox \u03bc_p\uff1a \u53d6\u4e24\u4e2a\u70b9\uff08\u90fd\u4f4d\u4e8e\u9971\u548c\u533a\uff09\u5206\u522b\u5e26\u5165\uff0c\u53ef\u4ee5\u5f97\u5230 C_ox \u03bc_n=2.61\u00d7\u301610\u3017^(-4) A/V^2 \uff0c\u540c\u7406\u53ef\u4ee5\u5f97\u5230 C_ox \u03bc_p=0.41\u00d7\u301610\u3017^(-4) A/V^2 \u5bf9\u4e8e\u5b9e\u9a8c\u5f97\u5230\u7684Vth~L\u66f2\u7ebf\u662f\u7531\u4e8e\u77ed\u6c9f\u6548\u5e94\u5f15\u8d77\u7684\u3002\u56e0\u6b64\u968f\u7740L\u7684\u53d8\u5c0f\uff0cVth\u4f1a\u53d8\u5c0f\u3002\u4f46\u662f\u4eff\u771f\u7684\u66f2\u7ebf\u6b63\u597d\u76f8\u53cd\uff0c\u8fd9\u662f\u7531\u4e8e\u5728\u5de5\u827a\u548c\u4eff\u771f\u8bbe\u8ba1\u7684\u65f6\u5019\u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u56e0\u6b64\u5728\u5236\u4f5c\u7684\u65f6\u5019\u4f1a\u5728n\u578b\u63ba\u6742\u7684\u9644\u8fd1\u589e\u5927\u6ce8\u5165p\u578b\u63ba\u6742\uff0c\u4f7f\u5f97\u9644\u8fd1\u53d8\u4e3ap+\u6765\u4f7f\u7a7a\u95f4\u7535\u8377\u533a\u53d8\u7a84\u3002\u56e0\u6b64\u5728\u672c\u6b21\u4eff\u771f\u7684\u65f6\u5019\uff0c\u5f53L\u5f88\u5c0f\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u662f\u4ecep+\u53cd\u578b\u5230n\u578b\uff0c\u9700\u8981\u66f4\u5927\u7684\u7535\u538b\u5f62\u6210\u6c9f\u9053\uff0c\u56e0\u6b64\u968f\u7740L\u51cf\u5c0fVth\u4f1a\u53d8\u5f97\u66f4\u5927\uff0c\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u201c\u53cd\u77ed\u6c9f\u6548\u5e94\u201d\u3002 \u800c\u4ece\u66f2\u7ebf\u8fd8\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u8fd9\u4e2a\u66f2\u7ebf\u4e2d\u95f4\u6709\u4e00\u90e8\u5206\u663e\u7136\u4e0d\u5e73\u6ed1\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u662f\u901a\u8fc7\u4eff\u771f\u505a\u51fa\u6765\u7684\uff0c cadence \u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u6570\u5b66\u6a21\u578b\u6765\u62df\u5408\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u5230\u660e\u663e\u7684\u4e09\u6bb5\u5206\u6bb5\u51fd\u6570\u66f2\u7ebf\u3002 Vth~W\u66f2\u7ebf\u540e\u9762Vth\u968f\u7740W\u53d8\u5927\u800c\u53d8\u5c0f\u662f\u56e0\u4e3amos\u7ba1\u7684\u7a84\u6c9f\u9053\u6548\u5e94\u3002\u5982\u4e0a\u6240\u8a00\uff0c\u5de5\u827a\u4e0a\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u4fee\u6b63\u8fd9\u79cd\u6548\u5e94\uff0c\u4e5f\u8fdb\u884c\u4e86\u5de5\u827a\u4e0a\u7684\u4fee\u6b63\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u201c\u53cd\u7a84\u6c9f\u6548\u5e94\u201d\uff0c\u4f7f\u5f97\u5728W\u5f88\u5c0f\u7684\u65f6\u5019\uff0c\u9608\u503c\u7535\u538b\u968f\u7740W\u589e\u5927\u800c\u589e\u5927\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u524d\u9762\u66f2\u7ebf\u7684\u60c5\u51b5\u3002","title":"analog"},{"location":"MATLAB/analog/#lab1_analog","text":"","title":"LAB1_ANALOG"},{"location":"MATLAB/analog/#_1","text":"\u6a21\u62df\u96c6\u6210\u7535\u8def\u8bbe\u8ba1\u8bfe\u7a0b\u7684\u5b9e\u9a8c\uff0c\u5b9e\u9a8c\u5185\u5bb9\u76f8\u5bf9\u4e8e\u4e4b\u540e\u7684\u5b9e\u9a8c\u8fd8\u662f\u6bd4\u8f83\u57fa\u7840\u7684\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u4eff\u771f\u53c2\u6570\u4fee\u6539\u7ed8\u5236mos\u7ba1\u7684\u5404\u79cd\u7279\u6027\u66f2\u7ebf\uff0c\u76ee\u7684\u662f\u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\u719f\u6089 cadence \u7684\u57fa\u672c\u64cd\u4f5c\u73af\u5883\u548c\u4eff\u771f\u7684\u57fa\u672c\u6b65\u9aa4\uff0c\u540c\u65f6\u5bf9mos\u7ba1\u7684\u7279\u6027\u66f2\u7ebf\u6709\u76f4\u89c2\u7684\u7406\u89e3\u3002","title":"\u4e00\u3001\u7b80\u4ecb"},{"location":"MATLAB/analog/#_2","text":"\u672c\u6b21\u5b9e\u9a8c\u8981\u6c42\u901a\u8fc7\u7ed9\u5b9a\u7684\u53c2\u6570\u548c\u7535\u8def\u56fe\uff0cstep by step\u5730\u642d\u5efa\u4e00\u4e2a\u7b80\u5355\u7684MOS\u7ba1\u7535\u8def\u6a21\u578b\uff0c\u5e76\u8fdb\u884c\u4e00\u4e9b\u57fa\u7840\u4eff\u771f\uff1a 1. \u5206\u522b\u5bf9 pmos \u4e0e nmos \u7ed8\u5236\u5176 Id~Vgs \u7684\u4eff\u771f\u53d8\u5316\u56fe\u3002 2. \u57281.\u7684\u57fa\u7840\u4e0a\u901a\u8fc7\u8c03\u6574\u4e0d\u540c\u7684Vgs\u7ed8\u5236\u51fa\u591a\u6761 Id~Vds \u66f2\u7ebf\u3002 3. \u7ed8\u5236 Vth \u968f\u7740W\u548cL\u53d8\u5316\u7684\u66f2\u7ebf\u3002 \u76f8\u5173\u53c2\u6570\u89c4\u5b9a\uff1a 1. \u7ba1\u5b50\u8bbe\u7f6e\u4e3a W=2u\uff0cL=1u\uff0cVgs=0~1.8V\uff0cVds=0~1.8V \uff08\u5b9e\u9a8c1\u4e2d\u91c7\u7528 Vds=1.8V \uff09 2. \u5728\u505aVth\u66f2\u7ebf\u65f6\uff0c Vds=1.8V\uff0cVgs=0.9V \u3002W\u4eff\u771f\u65f6\uff0c\u8bbe L=1u\uff0cW=1u~10u \u3002L\u4eff\u771f\u65f6\uff0c\u8bbe W= 5u\uff0cL=180n~5u \u3002","title":"\u4e8c\u3001\u5b9e\u9a8c\u8981\u6c42"},{"location":"MATLAB/analog/#_3","text":"set & cellview \u6839\u636e\u7ed9\u51fa\u7684\u5b9e\u9a8c\u7535\u8def\u56fe\u65b0\u5efa cellview \uff0c\u8bbe\u8ba1\u642d\u5efa\u5b9e\u9a8c\u7684\u7535\u8def\u56fe\u3002 \u5177\u4f53\u7684\u7535\u8def\u5c06\u5728\u540e\u9762\u7684\u56fe1\uff0c\u56fe2\u7ed9\u51fa\u3002 set \u5bf9\u5df2\u7ecf\u8bbe\u8ba1\u7684\u597d\u7684\u7535\u8def\u7684\u5404\u9879\u5143\u4ef6\u7684\u53c2\u6570\u8fdb\u884c\u8bbe\u7f6e\u3002 \u5728\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\u5c06\u540e\u9762\u4eff\u771f\u65f6\u8981\u8fdb\u884c\u7684 Vds\uff0cVgs\uff0cW\uff0cL \u7b49\u53c2\u6570\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u540e\u9762\u8fdb\u884c\u53c2\u6570\u4eff\u771f\u65f6\u5019\u7684\u626b\u63cf\u3002 \u5229\u7528ADE_L\u4eff\u771f\u8bbe\u7f6e\u5404\u9879\u53c2\u6570\u7684\u503c\uff0c\u8bbe\u5b9a\u5bf9\u5e94\u7684 output\uff08Ids\uff0cVth\uff09 \uff0c\u5e76\u8fdb\u884c\u5404\u9879\u53c2\u6570\u7684\u4eff\u771f\uff1a 1.\u5728\u5b9e\u9a8c1\u4e2d\u53ef\u4ee5\u76f4\u63a5\u5229\u7528Parametric\u8fdb\u884c\u53c2\u6570\u4eff\u771f\u3002 2.\u5b9e\u9a8c2\u4e2dVds\u53ef\u7531DC\u4eff\u771f\u4e2dSweep Variable\u4e2d\u7684Design Variable\u8bbe\u7f6e\u53d8\u5316\u8303\u56f4\u548c\u7cbe\u5ea6\uff0c\u800c\u53e6\u4e00\u4e2a\u53c2\u6570 Vgs \u53ef\u7531 Parametric Analysis \u8bbe\u7f6e\u53d8\u5316\u8303\u56f4\u3002 3.\u5728\u5b9e\u9a8c3\u4e2d\u8fdb\u884cop\u9009\u9879\u6765\u5f97\u5230mos\u7ba1\u7684Vth\u7684\u65f6\u5019\uff0c\u8981\u5148\u8fdb\u884c\u4e00\u6b21DC\u7684\u7a7a\u4eff\u624d\u53ef\u4ee5\u9009\u62e9mos\u7ba1\u7684op\u8f93\u51fa\u3002","title":"\u4e09\u3001\u5b9e\u9a8c\u6b65\u9aa4"},{"location":"MATLAB/analog/#_4","text":"Conclusion \u56fa\u5b9aVds\uff0c\u7ed8\u5236\u51fa\u7684Ids~Vgs\u56fe\u50cf \u4e0d\u540cVgs\u4e0bIds~Vds\u56fe\u50cf Vth\u4e0eW,L\u7684\u56fe\u50cf \u4eff\u771f\u7ed3\u679c\u5206\u6790 \u5f97\u5230\u7684Vgs\u4e0eVds\u66f2\u7ebf\u4e0e\u7406\u8bba\u503c\u4e0a\u7684\u4e00\u81f4\u3002\u5bf9\u4e8enmos\u6765\u8bf4\uff1a\u5728Vgs\u9010\u6e10\u589e\u5927\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9996\u5148\u5904\u4e8e\u622a\u65adscope\uff0c\u6b64\u65f6mos\u7ba1\u88ab\u5173\u65ad\uff0cIds=0\uff1b\u5728Vgs\u9010\u6e10\u5927\u8fc7Vth\u7684\u65f6\u5019\uff0cmos\u7ba1\u5de5\u4f5c\u5728\u9971\u548c\u533a\uff0c\u6839\u636e\u7535\u6d41\u516c\u5f0f I_ds=1/2 C_ox \u03bc_n W/L \u3016(V_gs-V_th)\u3017^2 \uff0cIds\u5c31\u968f\u7740Vgs\u7684\u589e\u5927\u4e0d\u65ad\u589e\u5927\u3002pmos\u4e0enmos\u7684\u60c5\u51b5\u76f8\u4f3c\uff0c\u53ea\u662f\u5bf9\u5e94\u7684\u7535\u6d41\u4e0e\u7535\u538b\u662f\u8d1f\u503c\uff0c\u7531Vgs=-1.8v~0v\uff0cpmos\u7ba1\u4ece\u9971\u548c\u533a\u53d8\u5230\u622a\u6b62\u3002 \u5728\u53d6\u4e0d\u540c\u7684Vgs\u65f6\u5206\u522b\u7ed8\u5236\u51fa\u4e0d\u540c\u7684Ids Vds\u66f2\u7ebf\u4e0e\u7406\u8bba\u4e0a\u4e00\u81f4\u3002\u5bf9\u4e8enmos\u6765\u8bf4\uff1a\u6bcf\u4e00\u6761Ids Vds\u66f2\u7ebf\uff0c\u968f\u7740Vds\u4e0d\u65ad\u7684\u589e\u5927\uff0cnmos\u7ba1\u7684\u5de5\u4f5c\u72b6\u6001\u5728Vds \u0002wzxhzdk:4\u0003 \u968f\u7740Vds\u7684\u589e\u5927\uff0cIds\u51e0\u4e4e\u5448\u7ebf\u6027\u589e\u957f\uff1b\u5f53Vds>Vgs-Vth\u65f6\uff0c\u5904\u4e8e\u9971\u548c\u533a\uff0c\u5219Ids\u51e0\u4e4e\u4e0d\u968fVds\u53d8\u5316\u800c\u53d8\u5316\u3002\u800c\u5bf9\u4e8e\u4e0d\u540c\u7684Vgs\u5f97\u5230\u7684\u4e0d\u540c\u7684\u66f2\u7ebf\uff0c\u53ef\u4ee5\u770b\u5230\u5728\u76f8\u540c\u7684Vds\u6761\u4ef6\u4e0b\uff0cIds\u4e5f\u968f\u7740Vgs\u7684\u589e\u5927\u800c\u589e\u5927\uff0c\u4e0e\u7406\u8bba\u7535\u6d41\u516c\u5f0f\u4e00\u81f4\u3002 \u8ba1\u7b97C_ox \u03bc_n\u4e0eC_ox \u03bc_p\uff1a \u53d6\u4e24\u4e2a\u70b9\uff08\u90fd\u4f4d\u4e8e\u9971\u548c\u533a\uff09\u5206\u522b\u5e26\u5165\uff0c\u53ef\u4ee5\u5f97\u5230 C_ox \u03bc_n=2.61\u00d7\u301610\u3017^(-4) A/V^2 \uff0c\u540c\u7406\u53ef\u4ee5\u5f97\u5230 C_ox \u03bc_p=0.41\u00d7\u301610\u3017^(-4) A/V^2 \u5bf9\u4e8e\u5b9e\u9a8c\u5f97\u5230\u7684Vth~L\u66f2\u7ebf\u662f\u7531\u4e8e\u77ed\u6c9f\u6548\u5e94\u5f15\u8d77\u7684\u3002\u56e0\u6b64\u968f\u7740L\u7684\u53d8\u5c0f\uff0cVth\u4f1a\u53d8\u5c0f\u3002\u4f46\u662f\u4eff\u771f\u7684\u66f2\u7ebf\u6b63\u597d\u76f8\u53cd\uff0c\u8fd9\u662f\u7531\u4e8e\u5728\u5de5\u827a\u548c\u4eff\u771f\u8bbe\u8ba1\u7684\u65f6\u5019\u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u56e0\u6b64\u5728\u5236\u4f5c\u7684\u65f6\u5019\u4f1a\u5728n\u578b\u63ba\u6742\u7684\u9644\u8fd1\u589e\u5927\u6ce8\u5165p\u578b\u63ba\u6742\uff0c\u4f7f\u5f97\u9644\u8fd1\u53d8\u4e3ap+\u6765\u4f7f\u7a7a\u95f4\u7535\u8377\u533a\u53d8\u7a84\u3002\u56e0\u6b64\u5728\u672c\u6b21\u4eff\u771f\u7684\u65f6\u5019\uff0c\u5f53L\u5f88\u5c0f\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u662f\u4ecep+\u53cd\u578b\u5230n\u578b\uff0c\u9700\u8981\u66f4\u5927\u7684\u7535\u538b\u5f62\u6210\u6c9f\u9053\uff0c\u56e0\u6b64\u968f\u7740L\u51cf\u5c0fVth\u4f1a\u53d8\u5f97\u66f4\u5927\uff0c\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u201c\u53cd\u77ed\u6c9f\u6548\u5e94\u201d\u3002 \u800c\u4ece\u66f2\u7ebf\u8fd8\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u8fd9\u4e2a\u66f2\u7ebf\u4e2d\u95f4\u6709\u4e00\u90e8\u5206\u663e\u7136\u4e0d\u5e73\u6ed1\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u662f\u901a\u8fc7\u4eff\u771f\u505a\u51fa\u6765\u7684\uff0c cadence \u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u91c7\u7528\u4e86\u4e0d\u540c\u7684\u6570\u5b66\u6a21\u578b\u6765\u62df\u5408\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u5230\u660e\u663e\u7684\u4e09\u6bb5\u5206\u6bb5\u51fd\u6570\u66f2\u7ebf\u3002 Vth~W\u66f2\u7ebf\u540e\u9762Vth\u968f\u7740W\u53d8\u5927\u800c\u53d8\u5c0f\u662f\u56e0\u4e3amos\u7ba1\u7684\u7a84\u6c9f\u9053\u6548\u5e94\u3002\u5982\u4e0a\u6240\u8a00\uff0c\u5de5\u827a\u4e0a\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u4fee\u6b63\u8fd9\u79cd\u6548\u5e94\uff0c\u4e5f\u8fdb\u884c\u4e86\u5de5\u827a\u4e0a\u7684\u4fee\u6b63\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u201c\u53cd\u7a84\u6c9f\u6548\u5e94\u201d\uff0c\u4f7f\u5f97\u5728W\u5f88\u5c0f\u7684\u65f6\u5019\uff0c\u9608\u503c\u7535\u538b\u968f\u7740W\u589e\u5927\u800c\u589e\u5927\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u524d\u9762\u66f2\u7ebf\u7684\u60c5\u51b5\u3002","title":"\u56db\u3001\u5b9e\u9a8c\u7ed3\u8bba"},{"location":"Network/URL/","text":"1 2 3 ??? note \"URL\" ![](http://pdqq4cby3.bkt.clouddn.com/15371038602996.jpg) ![](http://pdqq4cby3.bkt.clouddn.com/15371039138153.jpg)","title":"URL"},{"location":"Network/network base/","text":"Hacer Way \u00b6 \u8bed\u8a00 \u00b6 script asp\u3001php\u3001jsp html css js html http treaty CMS(B/S) MD5 \u63d0\u6743 \u540e\u95e8\uff1a\u5728\u673a\u5668\u4e0a\u79cd\u690d\u5165\u53e3\u5bf9\u4e3b\u673a\u8fdb\u884c\u957f\u671f\u7684\u63a7\u5236 \u8df3\u677f\uff1a\u4f7f\u7528\u8089\u9e21\u7684IP\u6765\u5b9e\u65bd\u653b\u51fb\u5176\u4ed6\u7684\u76ee\u6807\uff0c\u9690\u85cf\u81ea\u5df1\u7684\u8eab\u4efd\u4fe1\u606f \u65c1\u7ad9\u5165\u4fb5\uff1a\u540c\u670d\u52a1\u5668\u4e0b\u7684\u7f51\u7ad9\u7684\u5165\u4fb5\uff0c\u901a\u8fc7\u63d0\u6743\u8de8\u76ee\u5f55\u7684\u624b\u6bb5\u62ff\u5230\u76ee\u6807\u7f51\u7ad9\u7684\u6743\u9650 --webroot C\u6bb5\u5165\u4fb5\uff1a\u540c\u4e00\u4e2a\u7f51\u6bb5\u4e0a\u7684 \u5982\u76ee\u6807ip\u4e3a192.168.1.253\uff0c\u5165\u4fb5192.168.1.*\u7684\u4efb\u610f\u4e00\u53f0\u673a\u5668\uff0c\u7136\u540e\u5229\u7528\u9ed1\u5ba2\u5de5\u5177\u55c5\u63a2\u83b7\u53d6\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u4fe1\u606f-- sniffit snoop tcpdump dsniff \u6e17\u900f\u6d4b\u8bd5\uff1a\u9ed1\u76d2\u6d4b\u8bd5 \u767d\u76d2\u6d4b\u8bd5\uff08\u4ee3\u7801\u5ba1\u8ba1\uff09 APT\uff1aAdvanced Persistent Threat \u9ad8\u7ea7\u53ef\u6301\u7eed\u6027\u653b\u51fb TCP/IP \u672c\u6765\u5c31\u4e0d\u53ef\u9760 arp \u8868 \u8def\u7531\u662f\u6307\u5bfcIP\u62a5\u6587\u53d1\u9001\u7684\u8def\u5f84\u4fe1\u606f bin --\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684 boot --os config file dev --\u5b58\u50a8\u6587\u4ef6 etc --\u914d\u7f6e\u6587\u4ef6 home --\u7528\u6237 lib --\u51fd\u6570\u5e93\u6587\u4ef6 opt --\u5927\u578b\u7a0b\u5e8f proc --\u5f00\u673a\u6587\u4ef6 root --\u8d85\u7ea7\u7528\u6237 slinux --\u7c7b\u4f3c\u5bf9\u7a0b\u5e8f\u63a7\u5236 \u5b89\u5168\u6027\u9ad8 sys --\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6 usr var --\u65e5\u5fd7 \u5b89\u88c5\u7684Apache\u6587\u4ef6\u6839\u76ee\u5f55 uname -r #\u67e5\u770b\u5185\u6838 uname -a #\u66f4\u8be6\u7ec6\u7684 which uname hostname #\u67e5\u770b\u4e3b\u673a\u540d\u79f0 ipconfig cat /proc/cpuinfo #cpu cat /proc/cpumeminfo #memory halt reboot pwd \u8ba1\u7b97\u673a\u7f51\u7edc \u5c40\u57df\u7f51\u8bbe\u8ba1 \u8986\u76d6\u8303\u56f4\u5c0f \u81ea\u5df1\u82b1\u94b1\u4e70\u8bbe\u5907 \u5e26\u5bbd\u56fa\u5b9a \u81ea\u5df1\u7ef4\u62a4 \u63a5\u5165\u5c42(\u53e3\u8981\u591a) \u6c47\u805a\u5c42(\u6d41\u91cf\u8981\u5927) \u5e7f\u57df\u7f51 Internet ISP \u670d\u52a1\u5546 ISP internet\u670d\u52a1\u63d0\u4f9b\u5546 \u670d\u52a1\u5668\u6258\u7ba1\u5230\u673a\u623f \u8ddd\u79bb\u8fdc \u82b1\u94b1\u79df\u5e26\u5bbd","title":"Hacer Way"},{"location":"Network/network base/#hacer-way","text":"","title":"Hacer Way"},{"location":"Network/network base/#_1","text":"script asp\u3001php\u3001jsp html css js html http treaty CMS(B/S) MD5 \u63d0\u6743 \u540e\u95e8\uff1a\u5728\u673a\u5668\u4e0a\u79cd\u690d\u5165\u53e3\u5bf9\u4e3b\u673a\u8fdb\u884c\u957f\u671f\u7684\u63a7\u5236 \u8df3\u677f\uff1a\u4f7f\u7528\u8089\u9e21\u7684IP\u6765\u5b9e\u65bd\u653b\u51fb\u5176\u4ed6\u7684\u76ee\u6807\uff0c\u9690\u85cf\u81ea\u5df1\u7684\u8eab\u4efd\u4fe1\u606f \u65c1\u7ad9\u5165\u4fb5\uff1a\u540c\u670d\u52a1\u5668\u4e0b\u7684\u7f51\u7ad9\u7684\u5165\u4fb5\uff0c\u901a\u8fc7\u63d0\u6743\u8de8\u76ee\u5f55\u7684\u624b\u6bb5\u62ff\u5230\u76ee\u6807\u7f51\u7ad9\u7684\u6743\u9650 --webroot C\u6bb5\u5165\u4fb5\uff1a\u540c\u4e00\u4e2a\u7f51\u6bb5\u4e0a\u7684 \u5982\u76ee\u6807ip\u4e3a192.168.1.253\uff0c\u5165\u4fb5192.168.1.*\u7684\u4efb\u610f\u4e00\u53f0\u673a\u5668\uff0c\u7136\u540e\u5229\u7528\u9ed1\u5ba2\u5de5\u5177\u55c5\u63a2\u83b7\u53d6\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u4fe1\u606f-- sniffit snoop tcpdump dsniff \u6e17\u900f\u6d4b\u8bd5\uff1a\u9ed1\u76d2\u6d4b\u8bd5 \u767d\u76d2\u6d4b\u8bd5\uff08\u4ee3\u7801\u5ba1\u8ba1\uff09 APT\uff1aAdvanced Persistent Threat \u9ad8\u7ea7\u53ef\u6301\u7eed\u6027\u653b\u51fb TCP/IP \u672c\u6765\u5c31\u4e0d\u53ef\u9760 arp \u8868 \u8def\u7531\u662f\u6307\u5bfcIP\u62a5\u6587\u53d1\u9001\u7684\u8def\u5f84\u4fe1\u606f bin --\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684 boot --os config file dev --\u5b58\u50a8\u6587\u4ef6 etc --\u914d\u7f6e\u6587\u4ef6 home --\u7528\u6237 lib --\u51fd\u6570\u5e93\u6587\u4ef6 opt --\u5927\u578b\u7a0b\u5e8f proc --\u5f00\u673a\u6587\u4ef6 root --\u8d85\u7ea7\u7528\u6237 slinux --\u7c7b\u4f3c\u5bf9\u7a0b\u5e8f\u63a7\u5236 \u5b89\u5168\u6027\u9ad8 sys --\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6 usr var --\u65e5\u5fd7 \u5b89\u88c5\u7684Apache\u6587\u4ef6\u6839\u76ee\u5f55 uname -r #\u67e5\u770b\u5185\u6838 uname -a #\u66f4\u8be6\u7ec6\u7684 which uname hostname #\u67e5\u770b\u4e3b\u673a\u540d\u79f0 ipconfig cat /proc/cpuinfo #cpu cat /proc/cpumeminfo #memory halt reboot pwd \u8ba1\u7b97\u673a\u7f51\u7edc \u5c40\u57df\u7f51\u8bbe\u8ba1 \u8986\u76d6\u8303\u56f4\u5c0f \u81ea\u5df1\u82b1\u94b1\u4e70\u8bbe\u5907 \u5e26\u5bbd\u56fa\u5b9a \u81ea\u5df1\u7ef4\u62a4 \u63a5\u5165\u5c42(\u53e3\u8981\u591a) \u6c47\u805a\u5c42(\u6d41\u91cf\u8981\u5927) \u5e7f\u57df\u7f51 Internet ISP \u670d\u52a1\u5546 ISP internet\u670d\u52a1\u63d0\u4f9b\u5546 \u670d\u52a1\u5668\u6258\u7ba1\u5230\u673a\u623f \u8ddd\u79bb\u8fdc \u82b1\u94b1\u79df\u5e26\u5bbd","title":"\u8bed\u8a00"}]}