{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit [mkdocs.org]. Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit [mkdocs.org].","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Task List item 1 item A item B more text item a item b item c item C item 2 item 3","title":"Project layout"},{"location":"Sorting/","text":"\u6392\u5e8f\u7b97\u6cd5 \u00b6 O(n2) \u00b6 TestHelper \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H \u9009\u62e9\u6392\u5e8fSelection Sort \u00b6 ----\u7b2c\u4e8c\u7ae021\u5206\u949f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } 1 2 3 4 5 6 int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ; \u63d2\u5165\u6392\u5e8f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } 1 2 3 4 5 6 7 8 9 10 11 //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8 \u5e0c\u5c14\u6392\u5e8fshell sort \u00b6 \u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144 \u8865\u5145\uff1a \u00b6 \u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; } \u5192\u6ce1\u6392\u5e8f\uff08Bubble sort) \u00b6 \u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; } O(nlogn) \u00b6 \u5f52\u5e76\u6392\u5e8fMerge Sort \u00b6 \u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0 \u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 \u65e0\u4f18\u5316\u7684\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; } \u4f18\u5316\u4e00 \u00b6 \u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a \u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f \u00b6 ![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png) \u5feb\u901f\u6392\u5e8fQuickSort \u00b6 ![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"Sorting/#_1","text":"","title":"\u6392\u5e8f\u7b97\u6cd5"},{"location":"Sorting/#on2","text":"","title":"O(n2)"},{"location":"Sorting/#testhelper","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 // // Created by qtw1998 on 2018/6/28. // #ifndef SELECTIONSORT_SORTTESTHELPER_H #define SELECTIONSORT_SORTTESTHELPER_H #include <iostream> #include <cassert> #include <ctime> using namespace std ; namespace SortTestHelper { //\u751f\u6210\u6709n\u4e2a\u6570\u5b57\u7684\u968f\u673a\u6570\u6570\u7ec4\uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8303\u56f4\u662f[RangeL,RangeR] int * generateRandomArry ( int n , int RangeL , int RangeR ) { assert ( RangeL <= RangeR ); srand ( time ( NULL )); int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = rand () % ( RangeR - RangeL ) + RangeL ; } return arr ; } int * generateNearlyOrderedArray ( int n , int swapTimes ){ //\u4ea7\u751f\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u5e8f\u5217 int * arr = new int [ n ]; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = i ; //\u5148\u6709\u5e8f\u8d4b\u503c //\u968f\u673a\u6311\u9009\u51e0\u5bf9\u5143\u7d20\u8fdb\u884c\u4ea4\u6362 srand ( time ( NULL )); for ( int i = 0 ; i < swapTimes ; i ++ ){ int posx = rand () % n ; int posy = rand () % n ; swap ( arr [ posx ] , arr [ posy ] ); } return arr ; } template < typename T > void printArry ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \" ; } cout << endl ; } /* *\u5224\u5b9a\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u6210\u529f\u5b9e\u73b0 */ template < typename T > bool isSorted ( T arr [], int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) return false ; } return true ; } /* *\u53c2\u6570\u5217\u8868\uff1asortName \u6392\u5e8f\u7b97\u6cd5\u540d\u79f0\uff0c\u51fd\u6570\u7684\u6307\u9488\uff0c\u8f93\u5165\u7684\u6d4b\u8bd5\u6837\u4f8b */ template < typename T > void testSort ( string sortName , void ( * sort )( T [] , int ), T arr [], int n ) { clock_t startTime = clock (); sort ( arr , n ); clock_t endTime = clock (); //#include <ctime> assert ( isSorted ( arr , n )); cout << sortName << \":\" << double ( endTime - startTime ) / CLOCKS_PER_SEC << \"s\" << endl ; //\u6bcf\u4e00\u79d2\u949f\u8fdb\u884c\u7684\u65f6\u949f\u5468\u671f\u7684\u4e2a\u6570 return ; } int * copyIntArry ( int a [], int n ) { int * arr = new int [ n ]; copy ( a , a + n , arr ); return arr ; } } #endif //SELECTIONSORT_SORTTESTHELPER_H","title":"TestHelper"},{"location":"Sorting/#selection-sort","text":"----\u7b2c\u4e8c\u7ae021\u5206\u949f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 template < typename T > void selectionSort ( T arr [], int n ) { for ( int i = 0 ; i < n ; i ++ ) { int minIndex = i ; for ( int j = i + 1 ; j < n ; j ++ ) //\u627e\u51fa\u6700\u5c0f\u7684\u4e0b\u6807 { if ( arr [ j ] < arr [ minIndex ]) minIndex = j ; } swap ( arr [ minIndex ], arr [ i ]); } } 1 2 3 4 5 6 int n = 10000 ; int * arr = SortTestHelper :: generateRandomArry ( n , 0 , n ); SortTestHelper :: testSort ( \"selection Sort\" , selectionSort , arr , n ); delete [] arr ; return 0 ;","title":"\u9009\u62e9\u6392\u5e8fSelection Sort"},{"location":"Sorting/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; } 1 2 3 4 5 6 7 8 9 10 11 //\u6ce8\u610f\u5faa\u73af\u7684\u65b9\u5f0f template < typename T > void insertionSort ( T arr [], int n ) { for ( int i = 1 ; i < n ; i ++ ) //\u7b2c\u4e00\u4e2a\u8ba4\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86 { //\u5bfb\u627earr[i]\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5f80\u524d\u627e for ( int j = i ; j > 0 && arr [ j ] < arr [ j - 1 ]; j -- ) swap ( arr [ j ], arr [ j - 1 ]); } } * \u76f8\u6bd4\u4e8e\u9009\u62e9\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u63d0\u524d\u7ec8\u6b62\uff0c\u4e0d\u7528\u904d\u5386\u6574\u4e2a\u6570\u7ec4 * \u5982\u679c\u6570\u7ec4\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff0c\u63d2\u5165\u6392\u5e8fO(n)\uff0c\u5e94\u7528\u5e7f\u6cdb\uff1a\u9002\u7528\u4e8e\u5728\u4e00\u4e9b\u65e5\u5fd7\u53d1\u751f\u8d85\u65f6\u7b49\u60c5\u51b5 * \u8fd1\u4e4e\u6709\u6548\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u9ad8\u6bd4O(nlogn)\u9ad8","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"Sorting/#shell-sort","text":"\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u8981\u95f4\u9694\u4e3a1 \u7b2ci - 1\u6b21\u7684\u5206\u5272\u4f1a\u4fdd\u7559\u7b2ci\u6b21\u7684\u6392\u5e8f\u7279\u6027 \u7b2ci - 1\u6b21\u4e00\u5b9a\u8981\u6bd4i\u6b21\u7684\u95f4\u9694\u5c0f shell sort\u7684\u6838\u5fc3\uff1a\u589e\u91cf\u5e8f\u5217 + \u63d2\u5165\u6392\u5e8finsert sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 template < typename T > void shellSort ( T arr [], int n ){ int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; // \u8ba1\u7b97 increment sequence\uff08\u589e\u91cf\u5e8f\u5217\uff09: 1, 4, 13, 40, 121, 364, 1093... while ( h >= 1 ){ // h-sort the array for ( int i = h ; i < n ; i ++ ){ // \u5bf9 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... \u4f7f\u7528\u63d2\u5165\u6392\u5e8f T e = arr [ i ]; int j ; for ( j = i ; j >= h && e < arr [ j - h ] ; j -= h ) arr [ j ] = arr [ j - h ]; arr [ j ] = e ; } h /= 3 ; } } Increase Sequence Reference \uff1a https://blog.csdn.net/foliciatarier/article/details/53891144","title":"\u5e0c\u5c14\u6392\u5e8fshell sort"},{"location":"Sorting/#_3","text":"\u9012\u5f52\u95ee\u9898\uff08merge sort\u7528\u5230\u4e86\u9012\u5f52\uff09 Part I :\u9012\u5f52\u8868\u8fbe\u5f0f\uff08\u89c4\u5f8b\uff09 Part II:\u9012\u5f52\u51fa\u53e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int n ) { if ( n == 1 ) return arr [ 0 ]; else { if ( sortMax ( arr , n - 1 ) > arr [ n - 1 ]) return sortMax ( arr , n - 1 ); else return arr [ n - 1 ]; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 5 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <cstdio> using namespace std ; int sortMax ( int arr [], int L , int R ) { if ( L == R ) return arr [ R ]; else { int a = arr [ R ]; int b = sortMax ( arr , L , R - 1 ); return a + b ; } } int main ( int argc , char const * argv []) { int a [ 5 ] = { 1 , 2 , 3 , 43 , 5 }; printf ( \"%d \\n \" , sortMax ( a , 0 , 4 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570 #include <iostream> int gcd ( int a , int b ) { int r = a % b ; if ( r == 0 ) return b ; else return gcd ( b , r ); } using namespace std ; int main ( int argc , char * argv []) { cout << gcd ( 100 , 10 ); return 0 ; }","title":"\u8865\u5145\uff1a"},{"location":"Sorting/#bubble-sort","text":"\u4f7f\u7528\u9012\u5f52\u7684\u60f3\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; void BubbleSort ( int arr [], int L , int R ) { if ( L == R ) return ; else { for ( int i = L ; i < R ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ]) swap ( arr [ i ], arr [ i + 1 ]); } BubbleSort ( arr , L , R - 1 ); } } int main () { int a [ 5 ] = { 1 , 3 , 5 , 2 , 4 }; BubbleSort ( a , 0 , 4 ); for ( int i = 0 ; i < 5 ; i ++ ) { cout << a [ i ] << \" \" ; } cout << endl ; return 0 ; }","title":"\u5192\u6ce1\u6392\u5e8f\uff08Bubble sort)"},{"location":"Sorting/#onlogn","text":"","title":"O(nlogn)"},{"location":"Sorting/#merge-sort","text":"\u9012\u5f52\u5b9e\u73b0\uff08\u9012\u5f52\u6392\u5e8f\u7b97\u6cd5\uff09 \u6240\u9700\u7684\u989d\u5916\u7684\u7a7a\u95f4\u548cN\u6210\u6b63\u6bd4 \u901a\u8fc7\u4e8c\u5206\u6cd5\u8fbe\u5230O(logn)\u7684\u5c42\u7ea7\uff0c\u6bcf\u4e00\u5c42\u7ea7\u7528O(n)\u7684\u7b97\u6cd5\u6765\u8fdb\u884c\u6392\u5e8f \u628a\u590d\u5236\u597d\u7684\u6570\u7ec4\uff08\u4e0b\u8fb9\u7684\u6570\u7ec4\uff09\u5f53\u505a\u6837\u672c\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u5f53\u6210\u7a7a\u6570\u7ec4\u5f80\u91cc\u6dfb\u52a0","title":"\u5f52\u5e76\u6392\u5e8fMerge Sort"},{"location":"Sorting/#_4","text":"","title":"\u81ea\u9876\u5411\u4e0b\u9012\u5f52\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 //__mergeTwoSection\u53c8\u540d\u539f\u5730\u5f52\u5e76\u6392\u5e8f\uff08\u662f\u5176\u4ed6\u7684\u5f52\u5e76\u6392\u5e8f\u7684\u6838\u5fc3\u4ee3\u7801\u5757\uff09 // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76 #include <iostream> using namespace std ; void __mergeTwoSection ( int arr [], int L , int mid , int R ) { int aux [ R - L + 1 ]; for ( int i = L ; i < R + 1 ; i ++ ) aux [ i - L ] = arr [ i ]; int i = L , j = mid + 1 ; for ( int k = L ; k < R + 1 ; k ++ ) { //\u5bb9\u6613\u5ffd\u7565\u7684\u7279\u6b8a\u51fa\u9519\u60c5\u51b5-->else if if ( i > mid ) { arr [ k ] = aux [ j - L ]; j ++ ; } else if ( j > R ) { arr [ k ] = aux [ i - L ]; i ++ ; } else if ( aux [ i - L ] < aux [ j - L ]) { arr [ k ] = aux [ i - L ]; i ++ ; } else { arr [ k ] = aux [ j - L ]; j ++ ; } } } void __merge ( int arr [], int L , int R ) { if ( L >= R ) return ; int mid = ( L + R ) / 2 ; __merge ( arr , L , mid ); __merge ( arr , mid + 1 , R ); //if(arr[mid] > arr[mid + 1]) //\u6027\u80fd\u4f18\u5316 __mergeTwoSection ( arr , L , mid , R ); } void mergesort ( int arr [], int n ) { __merge ( arr , 0 , n - 1 ); } int main ( int argc , char const * argv []) { int a [ 5 ] = { 5 , 4 , 3 , 2 , 1 }; mergesort ( a , 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << a [ i ] << endl ; } return 0 ; }","title":"\u65e0\u4f18\u5316\u7684\u5b9e\u73b0"},{"location":"Sorting/#_6","text":"\u9996\u5148\u8bf4\u660e\u4e24\u4e2a\u95ee\u9898\uff1a","title":"\u4f18\u5316\u4e00"},{"location":"Sorting/#_7","text":"![Screenshot of Movist -2018-7-23, 11-46-31 AM--w1199]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-46-31 AM-.png) ![Screenshot of Movist -2018-7-23, 11-47-06 AM--w1157]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-47-06 AM-.png) ![Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM--w1123]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of ScreenFloat -2018-7-23, 11-47-29 AM-.png) ![Screenshot of Movist -2018-7-23, 11-51-54 AM--w1154]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-23, 11-51-54 AM-.png) ![Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM--w895]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Safari \u6d4f\u89c8\u5668 -2018-7-23, 4-27-08 PM-.png)","title":"\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f"},{"location":"Sorting/#quicksort","text":"![Screenshot of Movist -2018-7-25, 9-55-29 AM--w1233]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-55-29 AM-.png) ![Screenshot of Movist -2018-7-25, 9-56-40 AM--w1255]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-56-40 AM-.png) ![Screenshot of Movist -2018-7-25, 9-57-02 AM--w1214]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-57-02 AM-.png) ![Screenshot of Movist -2018-7-25, 9-58-48 AM-]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 9-58-48 AM-.png) ![Screenshot of Movist -2018-7-25, 10-04-05 AM--w1239]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-04-05 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-26 AM--w1270]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-26 AM-.png) ![Screenshot of Movist -2018-7-25, 10-05-44 AM--w1287]( http://pdqq4cby3.bkt.clouddn.com/Screenshot of Movist -2018-7-25, 10-05-44 AM-.png)","title":"\u5feb\u901f\u6392\u5e8fQuickSort"},{"location":"DSandALGORITHM/Recursion/","text":"core idea & forecasted cases use the sequence recursion the sequence must be already sorted the complexity is O(n) linear [pointer1] \u2192 0 set forward | [pointer2] \u2192 n - 1 set back caseI : arr[i] + arr[j] == M : unknown range(i++ j--) caseII : arr[i] + arr[j] < M : unknown range(i++) caseIII : arr[i] + arr[j] > M : unknown range(j--) 1 void ```c++ tab=\"merge two sections\" void merge(int arr1[],int n1,int arr2[],int n2,int arr_wanted[]) { int i = 0,j = 0,index = 0; while(i < n1 && j < n2) { if(arr1[i] <= arr2[j]) arr_wanted[index++] = arr1[i++]; else arr_wanted[index++] = arr2[j++]; while(i < n1) arr_wanted[index++] = arr1[i++]; while(j < n2) arr_wanted[index++] = arr2[j++]; } } ```","title":"Recursion"},{"location":"DSandALGORITHM/Sorting/","text":"O(n2) \u00b6 Selection Sort \u00b6 core idea \u2460 put the smallest number in the first place 'at every loop' \u2461 the index is the standard code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void selectionSort ( int arr [], int n ) { for ( int i = 0 ; i < n ; ++ i ) { int min_index = i ; for ( int j = i + 1 ; j < n ; ++ j ) //j is the later number of i at any time { if ( arr [ j ] < arr [ min_index ]) { min_index = j ; //find the min index in the loop } //we already get the smallest number in this loop 'when i still at the place which have not move to the next place' swap ( arr [ min_index ], arr [ i ]); // } } } when using swap directly,must add \"using namespace std;\" Insertion Sort \u00b6 core idea find the second number as a key(standard), use key to compare with the former numbers if less,the former number(closing) set back one place & key keeping compare with the former numbers until key bigger than the former number or get the limitation(out of the range) code myidea 1 2 3 4 5 6 7 8 9 10 11 12 void insertionSort ( int arr [], int n ) { for ( int j = 1 ; j < n ; ++ j ) { int key = arr [ j ]; int i = j - 1 ; for ( j ; key < arr [ i ] && i >= - 1 ; -- i ) { arr [ i + 1 ] = arr [ i ]; } arr [ i + 1 ] = key ; } } version-selected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; }","title":"Sorting"},{"location":"DSandALGORITHM/Sorting/#on2","text":"","title":"O(n2)"},{"location":"DSandALGORITHM/Sorting/#selection-sort","text":"core idea \u2460 put the smallest number in the first place 'at every loop' \u2461 the index is the standard code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void selectionSort ( int arr [], int n ) { for ( int i = 0 ; i < n ; ++ i ) { int min_index = i ; for ( int j = i + 1 ; j < n ; ++ j ) //j is the later number of i at any time { if ( arr [ j ] < arr [ min_index ]) { min_index = j ; //find the min index in the loop } //we already get the smallest number in this loop 'when i still at the place which have not move to the next place' swap ( arr [ min_index ], arr [ i ]); // } } } when using swap directly,must add \"using namespace std;\"","title":"Selection Sort"},{"location":"DSandALGORITHM/Sorting/#insertion-sort","text":"core idea find the second number as a key(standard), use key to compare with the former numbers if less,the former number(closing) set back one place & key keeping compare with the former numbers until key bigger than the former number or get the limitation(out of the range) code myidea 1 2 3 4 5 6 7 8 9 10 11 12 void insertionSort ( int arr [], int n ) { for ( int j = 1 ; j < n ; ++ j ) { int key = arr [ j ]; int i = j - 1 ; for ( j ; key < arr [ i ] && i >= - 1 ; -- i ) { arr [ i + 1 ] = arr [ i ]; } arr [ i + 1 ] = key ; } } version-selected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename T > void insertionSort ( T arr [], int n ){ for ( int i = 1 ; i < n ; i ++ ) { // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e // \u5199\u6cd51 // for( int j = i ; j > 0 ; j-- ) // if( arr[j] < arr[j-1] ) // swap( arr[j] , arr[j-1] ); // else // break; // \u5199\u6cd52 // for( int j = i ; j > 0 && arr[j] < arr[j-1] ; j -- ) // swap( arr[j] , arr[j-1] ); //arr[j] < arr[j-1] \u8fd9\u6837\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u4ea4\u6362\u4e4b\u540e\u53bb\u4e00\u4f4d\u4e00\u4f4d\u548c\u524d\u4e00\u4e2a\u4f4d\u6bd4\u8f83 //arr[j-1] > e \u8fd9\u6837\u6ca1\u6709\u53bb\u4e00\u4f4d\u4e00\u4f4d\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u53bb\u8d4b\u503c // \u5199\u6cd53 T e = arr [ i ]; //\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u8981\u6bd4\u8f83\u7684\u503c\u590d\u5236\u51fa\u6765\u4e86 int j ; // j\u4fdd\u5b58\u5143\u7d20e\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3010\u5343\u4e07\u6ce8\u610f\u5728\u9876\u5c42\u5faa\u73af\u4e0b\u5148\u58f0\u660e\u3011 for ( j = i ; j > 0 && arr [ j - 1 ] > e ; j -- ) arr [ j ] = arr [ j - 1 ]; arr [ j ] = e ; } return ; }","title":"Insertion Sort"},{"location":"Java/web_rig_login/","text":"\u7528\u6237\u5b9e\u4f53\u7684\u521b\u5efa---\u521b\u5efaUser 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package com.imooc.domain ; public class User { private String username ; private String password ; private String nickname ; private String sex ; private String hobby ; private String path ; public String getUsername () { return username ; } public void setUsername ( String username ) { this . username = username ; } public String getPassword () { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getNickname () { return nickname ; } public void setNickname ( String nickname ) { this . nickname = nickname ; } public String getSex () { return sex ; } public void setSex ( String sex ) { this . sex = sex ; } public String getHobby () { return hobby ; } public void setHobby ( String hobby ) { this . hobby = hobby ; } public String getPath () { return path ; } public void setPath ( String path ) { this . path = path ; } } \u521d\u59cb\u5316\u96c6\u5408---new InitServlet web.xml Info 1 2 3 4 5 6 7 8 9 10 11 <servlet> <description></description> <display-name> InitServlet </display-name> <servlet-name> InitServlet </servlet-name> <servlet-class> com.imooc.servlet.InitServet </servlet-class> <load-on-startup> 2 </load-on-startup> <!-- \u5728\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\u521b\u5efaServlet\u5b9e\u4f8b --> </servlet> <servlet-mapping> <servlet-name> InitServlet </servlet-name> <url-pattern> /InitServlet </url-pattern> </servlet-mapping> InitServlet.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.imooc.servlet ; import java.util.ArrayList ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import com.imooc.domain.User ; /** * \u7528\u6237\u6ce8\u518c\u7684\u521d\u59cb\u5316\u7684Servlet\u7c7b */ @WebServlet ( \"/InitServlet\" ) public class InitServlet extends HttpServlet { @Override public void init () throws ServletException { //\u521b\u5efa\u4e00\u4e2aList\u96c6\u5408\u7528\u4e8e\u4fdd\u5b58\u7528\u6237\u6ce8\u518c\u7684\u4fe1\u606f List < User > list = new ArrayList < User >(); //\u5c06list\u4fdd\u5b58\u5230ServletContext\u4f5c\u7528\u57df\u5f53\u4e2d this . getServletContext (). setAttribute ( \"list\" , list ); } } \u8868\u5355\u5f53\u4e2d\u7684\u6587\u4ef6\u4e0a\u4f20---\u77e5\u8bc6\u70b9 admonition 1 2 3 4 5 6 7 8 9 10 11 <!-- \u6587\u4ef6\u4e0a\u4f20\u7684\u6761\u4ef6 * \u8868\u5355\u5fc5\u987b\u662fpost\u63d0\u4ea4\u65b9\u5f0f(get\u6709\u5927\u5c0f\u7684\u9650\u5236) * \u8868\u5355\u4e2d\u5fc5\u987b\u6709\u6587\u4ef6\u4e0a\u4f20\u9879\uff0c\u6587\u4ef6\u4e0a\u4f20\u9879\u5fc5\u987b\u6709name\u5c5e\u6027\u548c\u503c <tr> <td class=\"td1\">\u4e0a\u4f20\u5934\u50cf</td> <td><input type=\"file\" id=\"photo\" name=\"upload\"></td> </tr> * \u8868\u5355\u7684enctype\u5c5e\u6027\u5fc5\u987b\u8bbe\u7f6e\u4e3amultipart/form-data <form action=\"/reg_login/RegistServlet\" method=\"post\" enctype=\"multipart/form-data\"> --> extionsion 1 2 3 4 \u8868\u5355\u6587\u4ef6\u7684\u4e0a\u4f20\u9700\u8981\u7528\u5230\u7684jar\u5305 \uff08/reg_login/WebContent/WEB-INF/lib/commons-fileupload-1.2.1.jar /reg_login/WebContent/WEB-INF/lib/commons-io-1.4.jar\uff09\uff1a https://share.weiyun.com/5VAFwpj RegistServlet InitVersion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package com.imooc.servlet ; import java.io.IOException ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a servletFileUpload . parseRequest ( request ); //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem\uff0c\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } TryCatchVersion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package com.imooc.servlet ; import java.io.IOException ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.FileItem ; import org.apache.commons.fileupload.FileUploadException ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 package com.imooc.servlet ; import java.io.IOException ; import java.util.ArrayList ; import java.util.List ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; import org.apache.commons.fileupload.FileItem ; import org.apache.commons.fileupload.FileUploadException ; import org.apache.commons.fileupload.disk.DiskFileItemFactory ; import org.apache.commons.fileupload.servlet.ServletFileUpload ; /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //\u5b9a\u4e49\u4e00\u4e2alist\u96c6\u5408\uff0c\u4fdd\u5b58\u5174\u8da3\u7231\u597d\u6570\u636e List < String > hobbylist = new ArrayList < String >(); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); //\u63a5\u6536\u590d\u9009\u6846\u7684\u6570\u636e // <tr> // <td class=\"td1\">\u5174\u8da3\u7231\u597d</td> // <td><label> // <input type=\"checkbox\" name=\"hobby\" value=\"\u7bee\u7403\">\u7bee\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u8db3\u7403\">\u8db3\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u6392\u7403\">\u6392\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u7fbd\u6bdb\u7403\">\u7fbd\u6bdb\u7403 // </label></td> // </tr> if ( \"hobby\" . equals ( name )) { //String name = fileItem.getFieldName(); String hobbyValue = fileItem . getString ( \"UTF-8\" ); hobbylist . add ( hobbyValue ); hobbyValue = hobbylist . toString (). substring ( 1 , hobbylist . toString (). length () - 1 ); // [xxx,yyy] --> xxx,yyy System . out . println ( name + \" \" + hobbylist ); //\u6253\u5370ArryList } } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } \u5b9e\u73b0User\u7684\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 /** * \u7528\u6237\u6ce8\u518c\u7684Servlet---\u5b58\u5728\u6587\u4ef6\u4e0a\u4f20\uff0c\u4f7f\u7528fileupload\u7ec4\u4ef6 */ @WebServlet ( \"/RegistServlet\" ) public class RegistServlet extends HttpServlet { protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { //\u6570\u636e\u7684\u63a5\u6536enctype\u63a5\u6536\u65b9\u5f0f\u8981\u53d8\u5316\"apache\" //\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u64cd\u4f5c\uff1a try { //\u5b9a\u4e49\u4e00\u4e2aMap\u96c6\u5408\u7528\u4e8e\u4fdd\u5b58\u63a5\u6536\u5230\u7684\u6570\u636e Map < String , String > map = new HashMap < String , String >(); //1.\u521b\u5efa\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61(fileupload\u7ec4\u4ef6\u5f53\u4e2d\u7684) DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory (); //2.\u521b\u5efa\u4e00\u4e2a\u6838\u5fc3\u89e3\u6790\u7c7b(\u89e3\u6790\u4ece\u6d4f\u89c8\u5668\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42)---\u548c\u4f20\u7edf\u65b9\u5f0f\u4e0d\u4e00\u6837\uff08\u9700\u8981\u89e3\u6790\u4e00\u4e0b\uff09 ServletFileUpload servletFileUpload = new ServletFileUpload ( diskFileItemFactory ); //\u5c31\u662f\u4e0a\u9762\u521b\u5efa\u7684\u78c1\u76d8\u6587\u4ef6\u9879\u5de5\u5382\u5bf9\u8c61 //3.\u89e3\u6790request\u8bf7\u6c42 \u4ece\u8868\u5355\u5f53\u4e2d\u7684\u6807\u7b7ename\u5f53\u4e2d\u83b7\u53d6--->fileitem\u5bf9\u8c61\uff08upload\u91cc\u5c01\u88c5\u7684\u5bf9\u8c61\uff09\uff0c\u8fd4\u56de\u7684\u662flist\u96c6\u5408 // List\u96c6\u5408\u5f53\u4e2d\u5b58\u653e\u7684\u662fFileItem\u5bf9\u8c61\uff08\u6bcf\u4e00\u4e2aFileItem\u4ee3\u8868\u7684\u5c31\u662f\u9875\u9762\u5f53\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u5355\u9879\uff09 // username password nickname sex ... \u90fd\u662f\u4e00\u4e2a List < FileItem > list = servletFileUpload . parseRequest ( request ); //\u5b9a\u4e49\u4e00\u4e2alist\u96c6\u5408\uff0c\u4fdd\u5b58\u5174\u8da3\u7231\u597d\u6570\u636e List < String > hobbylist = new ArrayList < String >(); //4.\u904d\u5386\u96c6\u5408\uff0c\u83b7\u5f97\u6bcf\u4e2aFileItem---\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 for ( FileItem fileItem : list ) { //\u5224\u65ad\u662f\u8868\u5355\u9879\u8fd8\u662f\u6587\u4ef6\u4e0a\u4f20\u9879 if ( fileItem . isFormField ()) { //\u666e\u901a\u8868\u5355\u9879 //\u63a5\u6536\u8868\u5355\u9879\u7684\u53c2\u6570\u7684\u503c String name = fileItem . getFieldName (); //\u83b7\u5f97\u8868\u5355\u9879\u7684name\u5c5e\u6027\u7684\u503c // <tr> // <td class=\"td1\">\u7528\u6237\u540d</td> // <td><input type=\"text\" class=\"input1\" name=\"username\"></td> // </tr> String value = fileItem . getString ( \"UTF-8\" ); //\u83b7\u5f97\u8868\u5355\u9879\u7684\u503c---\u89e3\u51b3\u4e2d\u6587\u4e71\u7801\u7684\u95ee\u9898 System . out . println ( name + \" \" + value ); //\u63a5\u6536\u590d\u9009\u6846\u7684\u6570\u636e // <tr> // <td class=\"td1\">\u5174\u8da3\u7231\u597d</td> // <td><label> // <input type=\"checkbox\" name=\"hobby\" value=\"\u7bee\u7403\">\u7bee\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u8db3\u7403\">\u8db3\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u6392\u7403\">\u6392\u7403 // <input type=\"checkbox\" name=\"hobby\" value=\"\u7fbd\u6bdb\u7403\">\u7fbd\u6bdb\u7403 // </label></td> // </tr> if ( \"hobby\" . equals ( name )) { //String name = fileItem.getFieldName(); String hobbyValue = fileItem . getString ( \"UTF-8\" ); hobbylist . add ( hobbyValue ); hobbyValue = hobbylist . toString (). substring ( 1 , hobbylist . toString (). length () - 1 ); // [xxx,yyy] --> xxx,yyy System . out . println ( name + \" \" + hobbylist ); //\u6253\u5370ArryList //\u5c06\u7231\u597d\u7684\u6570\u636e\u5b58\u5165\u5230Map\u96c6\u5408\u5f53\u4e2d map . put ( name , hobbyValue ); } else { //\u975e\u590d\u9009\u6846\u7684\u653e\u5165\u5230Map\u96c6\u5408\u5f53\u4e2d map . put ( name , value ); } } else { //\u6587\u4ef6\u4e0a\u4f20\u9879 //\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd } } System . out . println ( map ); //\u5c01\u88c5\u6570\u636e\u5230User\u5f53\u4e2d User user = new User (); user . setUsername ( map . get ( \"username\" )); user . setPassword ( map . get ( \"password\" )); user . setNickname ( map . get ( \"nickname\" )); user . setSex ( map . get ( \"sex\" )); user . setHobby ( map . get ( \"password\" )); //\u5c06\u6ce8\u518c\u7528\u6237\u7684\u4fe1\u606f\u5b58\u5165\u5230List\u96c6\u5408\u5f53\u4e2d\uff1a //\u5c06\u83b7\u5f97\u7684ServletContext\u5bf9\u8c61\uff1a\u5148\u53d6\u51fa\u6765\u96c6\u5408\uff0c\u5f80\u91cc\u9762\u6dfb\u52a0user\u540e\uff0c\u518d\u653e\u8fdb\u53bb---\u518d\u5230InitServlet.java\u5f53\u4e2drefactor toString List < User > userlist = ( List < User >) this . getServletContext (). getAttribute ( \"list\" ); userlist . add ( user ); for ( User u : userlist ) { System . out . println ( u ); } this . getServletContext (). setAttribute ( \"list\" , userlist ); } catch ( FileUploadException e ) { // TODO Auto-generated catch block e . printStackTrace (); } //\u7528\u8fd9\u4e2a\u6838\u5fc3\u7c7b\u53bb\u89e3\u6790request } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doGet ( request , response ); } } \u6587\u4ef6\u4e0a\u4f20\u540d\u79f0\u4e0d\u53ef\u4ee5\u91cd\u590d \u968f\u673a\u5b57\u7b26\u4e32\u7684\u751f\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package com.imooc.utils ; import java.util.UUID ; public class UploadUtils { /* * \u751f\u6210\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff1b */ public static String getUUIDFileName ( String fileName ) { return ; } public static void main ( String [] args ) { System . out . println ( UUID . randomUUID ()); //7e7e6ff9-578e-499e-92ff-39d199d06092 } } \u6b63\u5f0f\u751f\u6210\u6587\u4ef6\u540d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.imooc.utils ; import java.util.UUID ; public class UploadUtils { /* * \u751f\u6210\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff1b */ public static String getUUIDFileName ( String fileName ) { // \u5c06\u6587\u4ef6\u540d\u7684\u524d\u9762\u90e8\u5206\u8fdb\u884c\u622a\u53d6\uff1axx.jpg --> .jpg int idx = fileName . lastIndexOf ( \".\" ); //\u8fd4\u56de\u4e00\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u503c\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e String extension = fileName . substring ( idx ); //\u62d3\u5c55\u540d String uuidFileName = UUID . randomUUID (). toString (). replaceAll ( \"-\" , \"\" ) + extension ; // return uuidFileName ; } public static void main ( String [] args ) { System . out . println ( getUUIDFileName ( \"1.jpg\" )); //777b455a815b4eee87771f0568b29500.jpg } }","title":"Web \u5b9e\u73b0\u767b\u5f55\u6ce8\u518c\u529f\u80fd"},{"location":"Linux/AWK/","text":"\u6587\u672c\u67e5\u627e\u4e0e\u5904\u7406\u5de5\u5177 1 2 3 4 5 6 7 8 9 10 11 12 13 awk '{print [$1,$2]}' filename.txt #print 1 2 \u5217 awk '{print [$1 \"\\t\" $2]}' filename.txt #\u6392\u5217\u6574\u9f50 $0\u9ed8\u8ba4\u7684\u6574\u884c record --> \u6a2a\u884c field --> \u7ad6\u884c number of record / field NR / NF awk '{print [NR $1 \"\\t\" $2]}' filename.txt awk '$1==\"gold\"{print $0}' filename.txt #\u5c06\u7b2c\u4e00\u5217\u4e3agold\u7684\u6253\u5370\u51fa\u6765 \u8f93\u51fa\u7b2c\u4e03\u884c\uff1a awk 'NR==7{print}' filename.txt awk '{print $1,$2}' --> \u4ea4\u4e92\u5f0f ! []( http://pdqq4cby3.bkt.clouddn.com/15364825206096.jpg ) \u9ed8\u8ba4\u5206\u9694\u7b26\u2192space \u4fee\u6539\u9ed8\u8ba4\u5206\u9694\u7b26\u2192 awk 'BEGIN{FS=\",\"}{print 1, 1, 2}'#ofs \u2192\u8f93\u51fa\u5206\u9694\u7b26 awk '{$3=\"xxxx\";print NR \"\\t\" $0}' filename \u8f93\u51fa\u6bcf\u4e00\u884c\u7684\u6700\u540e\u4e00\u5217 AWK\u4f5c\u4e3a\u7f16\u7a0b\u8bed\u8a00\u8fd8\u53ef\u4ee5\u8fdb\u884c\u8ba1\u7b97(\u81ea\u52a8\u8bc6\u522b\u6570\u636e\u7c7b\u578b)\u2192\u5148\u8fdb\u884c\u6570\u5b57\u8ba1\u7b97\u518d\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u62fc\u63a5","title":"awk"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/","text":"File \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 head a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u524d8\u884c tail a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u540e8\u884c --------------wc \u7edf\u8ba1------------------ wc a.txt 6 5 40 a.txt ##\u8868\u793a\u663e\u793a \u884c\u6570 \u5355\u8bcd\u6570 \u5b57\u7b26\u6570 \u6587\u4ef6\u540d wc -w(word) -l(line) -c(\u5b57\u7b26\u6570) a.txt ##\u5355\u7eaf\u663e\u793a\u5355\u8bcd\u6570 5 a.txt ----------------\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c------------------------ rm -rf filename.txt ##remove the file -f\uff1a\u5f3a\u5236\u5220\u9664\uff0c\u5ffd\u7565\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\uff0c\u4ece\u4e0d\u7ed9\u51fa\u63d0\u793a\u3002 -i\uff1a\u4ea4\u4e92\u6a21\u5f0f\u5220\u9664\u6587\u4ef6\uff0c\u5220\u9664\u6587\u4ef6\u524d\u7ed9\u51fa\u63d0\u793a\u3002 -r\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -R\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -v\uff1a\u663e\u793a\u8fd0\u884c\u65f6\u8be6\u7ec6\u4fe1\u606f mkdir file mv file1.txt file2.txt ##change the filename mv file1.txt CTutorial/ ##move to another filefolder less file1.txt ##browser ------------------------grep \u67e5\u627e----------------------------------- grep \u67e5\u627e\u5b57\u7b26 filename -->\u7ea2\u8272\u8fd4\u56de grep l* filename.txt --> 0~n\u6b21 grep ll* filename.txt --> \u81f3\u5c11\u51fa\u73b01\u6b21\uff08\u5e26l\u7684\u90fd\u88ab\u627e\u51fa\u6765\u4e86\uff09 grep ^H filename.txt --> \u4ee5H\u5b57\u6bcd\u5f00\u5934\u7684 grep ab.d a.txt --> .\u4ee3\u8868\u4efb\u610f\u5b57\u7b26 abcdef abaddfadf abddggfgf grep [Aa]b.d a.txt -->\u4ee3\u8868\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5\u751a\u81f3 --> grep [A-Za-z] filename.txt abcdef abaddfadf Abddggfgf [\u7efc\u5408\u5e94\u7528] grep [A-Za-z]b.d a.txt abcdef abaddfadf cbddggfgf --------------------wc + grep -------------------- ![](http://pdqq4cby3.bkt.clouddn.com/15361425196772.jpg) chmod \u6743\u9650\u00b7\u547d\u4ee4\u76f8\u5173 \u00b6 chmod\u7684\u547d\u4ee4\u76f8\u5173 1 2 3 chmod u+r file.txt chmod go-r file.txt chmod \u7684\u4e8c\u8fdb\u5236\u8868\u793a Linux Shell Script \u00b6 > redirect \u628a\u8f93\u51fa\u6253\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u00b7\u628a\u8f93\u5165\u4ece\u6587\u4ef6\u91cc\u8bfb\u51fa\u6765 \u4f7f\u7528$ sh init.sh \u6765\u6267\u884c\u811a\u672c\u6587\u4ef6 variable \u53d8\u91cf echo Linux\u91cc\u7684\u53d8\u91cf\u811a\u672c\u91cc 1 2 3 4 5 a = 10 #\u4e0d\u53ef\u4ee5\u6253\u7a7a\u683c echo $a #\u8f93\u51faa \u201c$\u201d\u8d4b\u503c\u65f6 \u8bfb\u53d6\u65f6 echo \"Hello World\" $a echo Hello World $a #\u53ef\u4e0d\u5199\u53cc\u5f15\u53f7 expr \u8ba1\u7b97\u5f0f\u5b50 + - * / 1 2 3 4 5 a = 1 b = 2 c = ` expr $a + $b ` #y\u8fd0\u7b97\u7b26\u5de6\u53f3\u5fc5\u987b\u52a0\u7a7a\u683c d = ` expr $a \\* $b ` echo $c if \u6bd4\u8f83\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if [] then ... else ... fi > -gt greater than < -lt less than > = -ge greater or equal < = -le less or equal ! = -ne not equal == -eq equal a = 1 b = 2 if [ $a -gt $b ] then echo $a else echo $b fi for while \u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 for x in 1 2 3 4 5 do echo $x done x = 1 while [ $x -le 10 ] do echo $x x = ` expr $x + 1 ` done \u5b57\u7b26\u4e32 string echo \"123\" == echo 123 1 2 3 4 5 6 7 8 9 10 11 password = \"12345678\" echo \"Please input password:\" read userpassword if [ $userpassword -eq $password ] #\u201c=\u201d\u4e5f\u53ef then echo \"password is correct!\" else echo \"password is incorrect!!\" fi if [ -z $str1] #\u68c0\u6d4b\u662f\u5426\u4e3a\u7a7a -n (not zero) inputStream & outputStream 1 2 3 4 5 6 7 8 9 echo \"Please input a:\" read a echo \"Please input b:\" read b c = ` expr $a + $b ` echo $a + $b = $c Arry must be runned by terminal bash (not sh) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 arr =( 7 8 9 10 ) echo ${ arr [1] } #8 #\u6253\u5370\u6240\u6709\u7684\u5143\u7d20 arr =( 7 8 9 10 ) for i in ${ arr [@] } do sum = ` expr $sum + $i ` done echo $sum arr =( 7 8 9 10 ) #\u9009\u51fa\u6700\u5927\u5143\u7d20 max = ${ arr [0] } for i in ${ arr [@] } do if [ $i -gt $max ] then max = $i fi done echo $max Linux\u5168\u5c40\u53d8\u91cf\u00b7\u547d\u4ee4\u5de5\u5177\u96c6 \u00b6 ##global varies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 echo $USER HOME \u4ee3\u8868\u7528\u6237\u4e3b\u76ee\u5f55 cd ~ --> cd $HOME #\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e(\u610f\u4e49\u5728\u4e8e-->\u52a0\u5165\u5230\u73af\u5883\u53d8\u91cf\u5f53\u4e2d\u7684\u6587\u4ef6\u5728\u4efb\u610f\u7684\u8def\u5f84\u4e0b\u90fd\u53ef\u4ee5\u8fd0\u884c)\uff1a[LINUX\u5f53\u4e2d\u7528\u5192\u53f7\u6765\u9694\u5f00] parallels@parallels-vm:~$ PATH = $PATH :/filefoldername #ZIP\u538b\u7f29 zip zipfilename.zip * zip workspace.zip -r workspace/* #\u6240\u6709\u7684\u6587\u4ef6\u90fd\u6309\u7167\u539f\u6765\u7684\u6587\u4ef6\u7ed3\u6784\u538b\u7f29 ! []( http://pdqq4cby3.bkt.clouddn.com/15364756086386.jpg ) tar -zcvf CTut.tar.gz directory/ #-z use gzip program #-c create archive #-v display progress while creating archive #-f archieve file name \u76f4\u63a5\u53cc\u51fb\u5c31\u53ef\u4ee5\u89e3\u538b\u6216\u8005unzip zipfilename.zip tar -zxvf filename.tar.gz #\u6587\u4ef6\u4e0b\u8f7d wget URL [ -O filename.tar.gz ]","title":"Linux\u57fa\u672c\u547d\u4ee4"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 head a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u524d8\u884c tail a.txt -n 8 ##\u8868\u793a\u663e\u793aa.txt\u6587\u4ef6\u7684\u540e8\u884c --------------wc \u7edf\u8ba1------------------ wc a.txt 6 5 40 a.txt ##\u8868\u793a\u663e\u793a \u884c\u6570 \u5355\u8bcd\u6570 \u5b57\u7b26\u6570 \u6587\u4ef6\u540d wc -w(word) -l(line) -c(\u5b57\u7b26\u6570) a.txt ##\u5355\u7eaf\u663e\u793a\u5355\u8bcd\u6570 5 a.txt ----------------\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c------------------------ rm -rf filename.txt ##remove the file -f\uff1a\u5f3a\u5236\u5220\u9664\uff0c\u5ffd\u7565\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\uff0c\u4ece\u4e0d\u7ed9\u51fa\u63d0\u793a\u3002 -i\uff1a\u4ea4\u4e92\u6a21\u5f0f\u5220\u9664\u6587\u4ef6\uff0c\u5220\u9664\u6587\u4ef6\u524d\u7ed9\u51fa\u63d0\u793a\u3002 -r\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -R\uff1a\u9012\u5f52\u7684\u5220\u9664\u76ee\u5f55\u4e0b\u9762\u6587\u4ef6\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6587\u4ef6\u3002 -v\uff1a\u663e\u793a\u8fd0\u884c\u65f6\u8be6\u7ec6\u4fe1\u606f mkdir file mv file1.txt file2.txt ##change the filename mv file1.txt CTutorial/ ##move to another filefolder less file1.txt ##browser ------------------------grep \u67e5\u627e----------------------------------- grep \u67e5\u627e\u5b57\u7b26 filename -->\u7ea2\u8272\u8fd4\u56de grep l* filename.txt --> 0~n\u6b21 grep ll* filename.txt --> \u81f3\u5c11\u51fa\u73b01\u6b21\uff08\u5e26l\u7684\u90fd\u88ab\u627e\u51fa\u6765\u4e86\uff09 grep ^H filename.txt --> \u4ee5H\u5b57\u6bcd\u5f00\u5934\u7684 grep ab.d a.txt --> .\u4ee3\u8868\u4efb\u610f\u5b57\u7b26 abcdef abaddfadf abddggfgf grep [Aa]b.d a.txt -->\u4ee3\u8868\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5\u751a\u81f3 --> grep [A-Za-z] filename.txt abcdef abaddfadf Abddggfgf [\u7efc\u5408\u5e94\u7528] grep [A-Za-z]b.d a.txt abcdef abaddfadf cbddggfgf --------------------wc + grep -------------------- ![](http://pdqq4cby3.bkt.clouddn.com/15361425196772.jpg)","title":"File"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#chmod","text":"chmod\u7684\u547d\u4ee4\u76f8\u5173 1 2 3 chmod u+r file.txt chmod go-r file.txt chmod \u7684\u4e8c\u8fdb\u5236\u8868\u793a","title":"chmod \u6743\u9650\u00b7\u547d\u4ee4\u76f8\u5173"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#linux-shell-script","text":"> redirect \u628a\u8f93\u51fa\u6253\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u00b7\u628a\u8f93\u5165\u4ece\u6587\u4ef6\u91cc\u8bfb\u51fa\u6765 \u4f7f\u7528$ sh init.sh \u6765\u6267\u884c\u811a\u672c\u6587\u4ef6 variable \u53d8\u91cf echo Linux\u91cc\u7684\u53d8\u91cf\u811a\u672c\u91cc 1 2 3 4 5 a = 10 #\u4e0d\u53ef\u4ee5\u6253\u7a7a\u683c echo $a #\u8f93\u51faa \u201c$\u201d\u8d4b\u503c\u65f6 \u8bfb\u53d6\u65f6 echo \"Hello World\" $a echo Hello World $a #\u53ef\u4e0d\u5199\u53cc\u5f15\u53f7 expr \u8ba1\u7b97\u5f0f\u5b50 + - * / 1 2 3 4 5 a = 1 b = 2 c = ` expr $a + $b ` #y\u8fd0\u7b97\u7b26\u5de6\u53f3\u5fc5\u987b\u52a0\u7a7a\u683c d = ` expr $a \\* $b ` echo $c if \u6bd4\u8f83\u5927\u5c0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 if [] then ... else ... fi > -gt greater than < -lt less than > = -ge greater or equal < = -le less or equal ! = -ne not equal == -eq equal a = 1 b = 2 if [ $a -gt $b ] then echo $a else echo $b fi for while \u5faa\u73af 1 2 3 4 5 6 7 8 9 10 11 for x in 1 2 3 4 5 do echo $x done x = 1 while [ $x -le 10 ] do echo $x x = ` expr $x + 1 ` done \u5b57\u7b26\u4e32 string echo \"123\" == echo 123 1 2 3 4 5 6 7 8 9 10 11 password = \"12345678\" echo \"Please input password:\" read userpassword if [ $userpassword -eq $password ] #\u201c=\u201d\u4e5f\u53ef then echo \"password is correct!\" else echo \"password is incorrect!!\" fi if [ -z $str1] #\u68c0\u6d4b\u662f\u5426\u4e3a\u7a7a -n (not zero) inputStream & outputStream 1 2 3 4 5 6 7 8 9 echo \"Please input a:\" read a echo \"Please input b:\" read b c = ` expr $a + $b ` echo $a + $b = $c Arry must be runned by terminal bash (not sh) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 arr =( 7 8 9 10 ) echo ${ arr [1] } #8 #\u6253\u5370\u6240\u6709\u7684\u5143\u7d20 arr =( 7 8 9 10 ) for i in ${ arr [@] } do sum = ` expr $sum + $i ` done echo $sum arr =( 7 8 9 10 ) #\u9009\u51fa\u6700\u5927\u5143\u7d20 max = ${ arr [0] } for i in ${ arr [@] } do if [ $i -gt $max ] then max = $i fi done echo $max","title":"Linux Shell Script"},{"location":"Linux/Linux\u57fa\u672c\u547d\u4ee4\u884c/#linux","text":"##global varies 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 echo $USER HOME \u4ee3\u8868\u7528\u6237\u4e3b\u76ee\u5f55 cd ~ --> cd $HOME #\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e(\u610f\u4e49\u5728\u4e8e-->\u52a0\u5165\u5230\u73af\u5883\u53d8\u91cf\u5f53\u4e2d\u7684\u6587\u4ef6\u5728\u4efb\u610f\u7684\u8def\u5f84\u4e0b\u90fd\u53ef\u4ee5\u8fd0\u884c)\uff1a[LINUX\u5f53\u4e2d\u7528\u5192\u53f7\u6765\u9694\u5f00] parallels@parallels-vm:~$ PATH = $PATH :/filefoldername #ZIP\u538b\u7f29 zip zipfilename.zip * zip workspace.zip -r workspace/* #\u6240\u6709\u7684\u6587\u4ef6\u90fd\u6309\u7167\u539f\u6765\u7684\u6587\u4ef6\u7ed3\u6784\u538b\u7f29 ! []( http://pdqq4cby3.bkt.clouddn.com/15364756086386.jpg ) tar -zcvf CTut.tar.gz directory/ #-z use gzip program #-c create archive #-v display progress while creating archive #-f archieve file name \u76f4\u63a5\u53cc\u51fb\u5c31\u53ef\u4ee5\u89e3\u538b\u6216\u8005unzip zipfilename.zip tar -zxvf filename.tar.gz #\u6587\u4ef6\u4e0b\u8f7d wget URL [ -O filename.tar.gz ]","title":"Linux\u5168\u5c40\u53d8\u91cf\u00b7\u547d\u4ee4\u5de5\u5177\u96c6"},{"location":"Linux/MIPS Language/","text":"simple language rules printf_int 1 2 3 4 5 6 7 8 9 10 11 li $1,1 add $t0,$1,2 # $t0 = $t1 + 2 #printf(\"%d\", t0); # $v0 = 1, syscall -> print_int(t0) # $v0 = 4, syscall -> print_string move $a0, $t0 li $v0, 1 syscall printf_string 1 2 3 4 5 6 7 .data msg: .ascii \"Hello World\" .text la $a0, msg li $v0, 4 syscall","title":"MIPS Language"},{"location":"Linux/OS/","text":"\u5f62\u8c61\u6bd4\u55bb 1 \u786c\u4ef6\u5b9e\u73b0\u5c0f\u7684\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u6784\u6210\u6307\u4ee4\u96c6\uff0c\u751f\u6210\u8f6f\u4ef6","title":"OS"},{"location":"MATLAB/LAB1/","text":"LAB1 \u00b6 MEMBERS: \u00b6 516030910380 \u9ec4\u5bb6\u6770 516030910186 \u4e54\u7530\u4f1f 516030910315 \u738b\u4e1a\u4f1f \u4e00\u3001\u5b9e\u9a8c\u8981\u6c42 \u00b6 \u00b7 \u529f\u80fd\u8981\u6c42 \uff1a\u5728reset\u4e4b\u540e\uff0c\u677f\u4e0aLED\u706f\u6309\u4e00\u5b9a\u987a\u5e8f\u4eae\u8d77\u3002 \u00b7 \u65f6\u5e8f\u8981\u6c42 \uff1a125MHZ \u00b7 \u8d44\u6e90\u8981\u6c42 \uff1a\u7efc\u5408\u540e LUT 50\uff0cFF50\uff08\u65e0ILA\uff09 \u00b7 \u9879\u76ee\u529f\u80fd \uff1a\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u8bc6\u522b\u51fa1001\u5e8f\u5217\u3002 \u00b7 \u8f93\u5165 \uff1a\u7ed9\u5b9a\u7684ROM\u3002 \u00b7 \u8f93\u51fa \uff1a\u521d\u59cb\u72b6\u6001 000 \u56db\u4e2aLED\u706f\u5168\u706d\uff1b\u68c0\u6d4b\u52301\uff0cLD0\u4eae \u8d77\uff1b\u68c0\u6d4b\u523010\uff0cLD1\u4eae\u8d77\uff1b\u68c0\u6d4b\u5230100\uff0cLD2\u4eae\u8d77\uff1b\u68c0\u6d4b1001\uff0cLD3\u4eae\u8d77\u3002LED\u706f\u7684\u6240\u6709\u53d8\u6362\u5e94\u5728\u51e0\u79d2\u5185\u5b8c\u6210\u3002 \u4e8c\u3001\u4ee3\u7801\u8bbe\u8ba1\u601d\u8def \u00b6 clk_divider.v: 125M/7.5=16666666.67 \u6545\u53ef\u9009\u62e9\u8ba9clk\u6bcf\u63a5\u6536\u5230 clk_125 \u76848333333\u4e2a\u4e0a\u5347\u6cbf\u7ffb\u8f6c\u4e00\u6b21\uff0c\u5373clk\u7684\u534a\u4e2a\u5468\u671f\u76f8\u5f53\u4e8eclk_125\u76848333333\u4e2a\u5468\u671f\uff0c\u8fbe\u52307.5000003Hz\u7684\u9891\u7387\uff0c\u8fd9\u65f6\u53d1\u73b0\u9891\u7387\u76f8\u5bf97.5Hz\u7684\u8bef\u5dee\u975e\u5e38\u5c0f\uff0c\u6545\u5206\u9891\u7684\u601d\u8def\u662f\u53ef\u884c\u7684\u3002 ctrl.v : \u8f93\u5165\u7684\u5e8f\u5217\u4e00\u5171\u80fd\u4f7fled\u4ea7\u751f\u4e94\u79cd\u60c5\u51b5\uff1a\u5168\u706d\uff0cled[0]\u4eae\uff0cled[1]\u4eae\uff0cled[2]\u4eae\u6216led[3]\u4eae\uff0c\u6545\u53ef\u7528\u5305\u542b\u4e94\u4e2a\u72b6\u6001\u7684\u72b6\u6001\u673a\u5b9e\u73b0 ctrl.v \u3002\u4e3a\u65b9\u4fbf\u5e03\u7ebf\uff0c\u5c065\u4e2astate\u5206\u522b\u8bbe\u7f6e\u4e3a state0=4\u2018b0000, state1=4\u2019b0001, state2=4\u2019b0010, state3=4\u2019b0100, state4=4\u2019b1000 \uff0c\u5f53\u8f93\u5165\u5e8f\u5217\u6309\u71671001\u7684\u6b21\u5e8f\u8fdb\u5165\u65f6\uff0c\u5219\u4ecestate\u4ecestate0\u4f9d\u6b21\u53d8\u5316\u5230state4\uff1b\u82e5\u51fa\u73b0\u4e0d\u7b26\u54081001\u7684\u5e8f\u5217\uff0c\u82e5\u53d1\u73b0\u4e0d\u7b26\u5408\u65f6\u6536\u5230\u7684data\u4e3a0\u5219\u56de\u5230state0\uff0c\u5426\u5219\u56de\u5230state1\uff1b\u5728state4\uff0c\u82e5\u8f93\u51651\u5219\u8fdb\u5165state1\uff0c\u5426\u5219\u8fdb\u5165state0\u3002\u4e3a\u9002\u5e94\u4eba\u4eec\u5de6\u5c0f\u53f3\u5927\u7684\u4e60\u60ef\uff0c\u5c06led[3],led[2],led[1],led[0]\u8bbe\u7f6e\u4e3astate[0],state[1].state[2],state[3]\u3002 \u4e09\u3001\u5b9e\u9a8c\u6b65\u9aa4 \u00b6 write .v file 1.\u89c2\u5bdftop.v\u6587\u4ef6\uff0c\u6839\u636e\u63d0\u793a\u5199\u51faclk_divider.v\u548cctrl.v\u6587\u4ef6\uff0c\u5e76\u8fdb\u884cmodelsim\u4eff\u771f\u3002 simulation 2.\u6a21\u4efflab5\uff0c\u6309ppt\u4e2d\u8981\u6c42\u8bbe\u7f6e\u7ba1\u811a\uff0c\u751f\u6210uart_led_zybo.xdc\u6587\u4ef6\u3002 3.\u65b0\u5efa\u9879\u76eeproject1\uff0c\u5c06\u6240\u6709.v\u6587\u4ef6\uff08blk_mem\u4e2d\u7684\u9664\u5916\uff09\u5f15\u7528\u4e3aDesign Source\uff0c\u5c06uart_led_zybo.xdc\u548cblk_mem_ooc.xdc\u6587\u4ef6\u5f15\u7528\u4e3aConstraints\uff0c\u5c06blk_mem.xci\u5f15\u7528\u4e3aip\u3002 4.\u6309\u7167ppt\u4e2d\u7684\u6307\u5bfc\u5f15\u7528data.coe Run synthesis & implementation 5.Run synthesis 6.Run implementation Fig.4 Run implementation\u540e\u5f97\u5230\u7684schematic\u3001timing\u548cpower summary Fig.5 LUT\u548cFF\u6ee1\u8db3\u9898\u76ee\u8981\u6c42 generate bitstream 7.generate bitstream\u5e76\u70e7\u5199\u5230zybo\u4e0a\uff0c\u9a8c\u8bc1\u5f97\u5b9e\u9a8c\u73b0\u8c61\u6b63\u786e\u3002\uff08\u81ea\u5de6\u5230\u53f3\u706f\u7684\u95ea\u70c1\u6b21\u5e8f\u4e3a1\u30012\u30013\u30014\u30011\u30012\u30011\u30012\u30013\u30011\u30012\u30013\u30014\uff09\uff08\u53ef\u80fd\u4e0e\u5176\u4ed6\u5c0f\u7ec4\u7684\u95ea\u70c1\u65b9\u5f0f\u5de6\u53f3\u98a0\u5012\uff0c\u56e0\u4e3a\u5728\u5199ctrl.v\u6587\u4ef6\u65f6\u6709\u610f\u5c06led\u7684\u503c\u8fdb\u884c\u4e86\u5de6\u53f3\u98a0\u5012\uff0c\u4f7f\u677f\u4e0a\u81ea\u5de6\u5230\u53f3\u5206\u522b\u5bf9\u5e94led[0]\u3001led[1]\u3001led[2]\u3001led[3]\uff09 8.\u5c06\u9879\u76ee\u53e6\u5b58\u4e3a\u3002\u5728\u65b0\u9879\u76ee\u4e2d\u6309\u7167lab6\u4e2d\u63d0\u793a\u8fdb\u884c\u6dfb\u52a0ILA\u8fdb\u884cdebug\u3002 9.\u5728top.v\u6587\u4ef6\u4e2d\u6dfb\u52a0ILA\u76f8\u5173\u4ee3\u7801 10.\u91cd\u65b0\u8fdb\u884csynthesis\u548cimplementation\u4eff\u771f\uff0c\u751f\u6210bitstream\u5e76\u70e7\u5199\u81f3zybo 11.\u70e7\u5199\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u53cd\u590d\u5229\u7528set probe\u6293\u53d6led\u7684\u72b6\u6001\u3002 Fig.8\u6293\u53d60001\u30010010\u30010100\u30011000\u5e8f\u5217\u6210\u529f \u56db\u3001\u5b9e\u9a8c\u7ed3\u8bba \u00b6 Conclusion \u7531\u4e0a\u4e00\u90e8\u5206\u4e2d\u7684\u622a\u56fe\u77e5\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u6700\u540e\u751f\u6210\u7684\u9879\u76ee\u7b26\u5408ppt\u4e2d\u7684\u5b9e\u9a8c\u8981\u6c42\u3002 \u4e94\u3001\u5b9e\u9a8c\u611f\u60f3 \u00b6 \u901a\u8fc7\u5bf9lab1\u5230lab6\u7684\u5b9e\u9a8c\u6307\u5357\u7684\u5b66\u4e60\uff0c\u638c\u63e1\u4e86\u4f7f\u7528vivado\u8fdb\u884c\u4eff\u771f\u3001\u751f\u6210\u5e76\u89c2\u5bdfsynthesis\u548cimplementation\u62a5\u544a\u3001\u4f7f\u7528IP\u89e3\u51b3timing\u95ee\u9898\u3001\u8bbe\u7f6e\u7ba1\u811a\u3001\u5229\u7528sdk\u548cTeraTerm\u5bf9\u751f\u6210\u7684\u9879\u76ee\u529f\u80fd\u8fdb\u884c\u9a8c\u8bc1\u3001\u751f\u6210ILA\u8fdb\u884cdebug\u7b49\u6280\u80fd\u3002 \u611f\u8c22\u8001\u5e08\u548c\u52a9\u6559\u7684\u6307\u5bfc\uff01","title":"vivado"},{"location":"MATLAB/LAB1/#lab1","text":"","title":"LAB1"},{"location":"MATLAB/LAB1/#members","text":"516030910380 \u9ec4\u5bb6\u6770 516030910186 \u4e54\u7530\u4f1f 516030910315 \u738b\u4e1a\u4f1f","title":"MEMBERS:"},{"location":"MATLAB/LAB1/#_1","text":"\u00b7 \u529f\u80fd\u8981\u6c42 \uff1a\u5728reset\u4e4b\u540e\uff0c\u677f\u4e0aLED\u706f\u6309\u4e00\u5b9a\u987a\u5e8f\u4eae\u8d77\u3002 \u00b7 \u65f6\u5e8f\u8981\u6c42 \uff1a125MHZ \u00b7 \u8d44\u6e90\u8981\u6c42 \uff1a\u7efc\u5408\u540e LUT 50\uff0cFF50\uff08\u65e0ILA\uff09 \u00b7 \u9879\u76ee\u529f\u80fd \uff1a\u5728\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u8bc6\u522b\u51fa1001\u5e8f\u5217\u3002 \u00b7 \u8f93\u5165 \uff1a\u7ed9\u5b9a\u7684ROM\u3002 \u00b7 \u8f93\u51fa \uff1a\u521d\u59cb\u72b6\u6001 000 \u56db\u4e2aLED\u706f\u5168\u706d\uff1b\u68c0\u6d4b\u52301\uff0cLD0\u4eae \u8d77\uff1b\u68c0\u6d4b\u523010\uff0cLD1\u4eae\u8d77\uff1b\u68c0\u6d4b\u5230100\uff0cLD2\u4eae\u8d77\uff1b\u68c0\u6d4b1001\uff0cLD3\u4eae\u8d77\u3002LED\u706f\u7684\u6240\u6709\u53d8\u6362\u5e94\u5728\u51e0\u79d2\u5185\u5b8c\u6210\u3002","title":"\u4e00\u3001\u5b9e\u9a8c\u8981\u6c42"},{"location":"MATLAB/LAB1/#_2","text":"clk_divider.v: 125M/7.5=16666666.67 \u6545\u53ef\u9009\u62e9\u8ba9clk\u6bcf\u63a5\u6536\u5230 clk_125 \u76848333333\u4e2a\u4e0a\u5347\u6cbf\u7ffb\u8f6c\u4e00\u6b21\uff0c\u5373clk\u7684\u534a\u4e2a\u5468\u671f\u76f8\u5f53\u4e8eclk_125\u76848333333\u4e2a\u5468\u671f\uff0c\u8fbe\u52307.5000003Hz\u7684\u9891\u7387\uff0c\u8fd9\u65f6\u53d1\u73b0\u9891\u7387\u76f8\u5bf97.5Hz\u7684\u8bef\u5dee\u975e\u5e38\u5c0f\uff0c\u6545\u5206\u9891\u7684\u601d\u8def\u662f\u53ef\u884c\u7684\u3002 ctrl.v : \u8f93\u5165\u7684\u5e8f\u5217\u4e00\u5171\u80fd\u4f7fled\u4ea7\u751f\u4e94\u79cd\u60c5\u51b5\uff1a\u5168\u706d\uff0cled[0]\u4eae\uff0cled[1]\u4eae\uff0cled[2]\u4eae\u6216led[3]\u4eae\uff0c\u6545\u53ef\u7528\u5305\u542b\u4e94\u4e2a\u72b6\u6001\u7684\u72b6\u6001\u673a\u5b9e\u73b0 ctrl.v \u3002\u4e3a\u65b9\u4fbf\u5e03\u7ebf\uff0c\u5c065\u4e2astate\u5206\u522b\u8bbe\u7f6e\u4e3a state0=4\u2018b0000, state1=4\u2019b0001, state2=4\u2019b0010, state3=4\u2019b0100, state4=4\u2019b1000 \uff0c\u5f53\u8f93\u5165\u5e8f\u5217\u6309\u71671001\u7684\u6b21\u5e8f\u8fdb\u5165\u65f6\uff0c\u5219\u4ecestate\u4ecestate0\u4f9d\u6b21\u53d8\u5316\u5230state4\uff1b\u82e5\u51fa\u73b0\u4e0d\u7b26\u54081001\u7684\u5e8f\u5217\uff0c\u82e5\u53d1\u73b0\u4e0d\u7b26\u5408\u65f6\u6536\u5230\u7684data\u4e3a0\u5219\u56de\u5230state0\uff0c\u5426\u5219\u56de\u5230state1\uff1b\u5728state4\uff0c\u82e5\u8f93\u51651\u5219\u8fdb\u5165state1\uff0c\u5426\u5219\u8fdb\u5165state0\u3002\u4e3a\u9002\u5e94\u4eba\u4eec\u5de6\u5c0f\u53f3\u5927\u7684\u4e60\u60ef\uff0c\u5c06led[3],led[2],led[1],led[0]\u8bbe\u7f6e\u4e3astate[0],state[1].state[2],state[3]\u3002","title":"\u4e8c\u3001\u4ee3\u7801\u8bbe\u8ba1\u601d\u8def"},{"location":"MATLAB/LAB1/#_3","text":"write .v file 1.\u89c2\u5bdftop.v\u6587\u4ef6\uff0c\u6839\u636e\u63d0\u793a\u5199\u51faclk_divider.v\u548cctrl.v\u6587\u4ef6\uff0c\u5e76\u8fdb\u884cmodelsim\u4eff\u771f\u3002 simulation 2.\u6a21\u4efflab5\uff0c\u6309ppt\u4e2d\u8981\u6c42\u8bbe\u7f6e\u7ba1\u811a\uff0c\u751f\u6210uart_led_zybo.xdc\u6587\u4ef6\u3002 3.\u65b0\u5efa\u9879\u76eeproject1\uff0c\u5c06\u6240\u6709.v\u6587\u4ef6\uff08blk_mem\u4e2d\u7684\u9664\u5916\uff09\u5f15\u7528\u4e3aDesign Source\uff0c\u5c06uart_led_zybo.xdc\u548cblk_mem_ooc.xdc\u6587\u4ef6\u5f15\u7528\u4e3aConstraints\uff0c\u5c06blk_mem.xci\u5f15\u7528\u4e3aip\u3002 4.\u6309\u7167ppt\u4e2d\u7684\u6307\u5bfc\u5f15\u7528data.coe Run synthesis & implementation 5.Run synthesis 6.Run implementation Fig.4 Run implementation\u540e\u5f97\u5230\u7684schematic\u3001timing\u548cpower summary Fig.5 LUT\u548cFF\u6ee1\u8db3\u9898\u76ee\u8981\u6c42 generate bitstream 7.generate bitstream\u5e76\u70e7\u5199\u5230zybo\u4e0a\uff0c\u9a8c\u8bc1\u5f97\u5b9e\u9a8c\u73b0\u8c61\u6b63\u786e\u3002\uff08\u81ea\u5de6\u5230\u53f3\u706f\u7684\u95ea\u70c1\u6b21\u5e8f\u4e3a1\u30012\u30013\u30014\u30011\u30012\u30011\u30012\u30013\u30011\u30012\u30013\u30014\uff09\uff08\u53ef\u80fd\u4e0e\u5176\u4ed6\u5c0f\u7ec4\u7684\u95ea\u70c1\u65b9\u5f0f\u5de6\u53f3\u98a0\u5012\uff0c\u56e0\u4e3a\u5728\u5199ctrl.v\u6587\u4ef6\u65f6\u6709\u610f\u5c06led\u7684\u503c\u8fdb\u884c\u4e86\u5de6\u53f3\u98a0\u5012\uff0c\u4f7f\u677f\u4e0a\u81ea\u5de6\u5230\u53f3\u5206\u522b\u5bf9\u5e94led[0]\u3001led[1]\u3001led[2]\u3001led[3]\uff09 8.\u5c06\u9879\u76ee\u53e6\u5b58\u4e3a\u3002\u5728\u65b0\u9879\u76ee\u4e2d\u6309\u7167lab6\u4e2d\u63d0\u793a\u8fdb\u884c\u6dfb\u52a0ILA\u8fdb\u884cdebug\u3002 9.\u5728top.v\u6587\u4ef6\u4e2d\u6dfb\u52a0ILA\u76f8\u5173\u4ee3\u7801 10.\u91cd\u65b0\u8fdb\u884csynthesis\u548cimplementation\u4eff\u771f\uff0c\u751f\u6210bitstream\u5e76\u70e7\u5199\u81f3zybo 11.\u70e7\u5199\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u53cd\u590d\u5229\u7528set probe\u6293\u53d6led\u7684\u72b6\u6001\u3002 Fig.8\u6293\u53d60001\u30010010\u30010100\u30011000\u5e8f\u5217\u6210\u529f","title":"\u4e09\u3001\u5b9e\u9a8c\u6b65\u9aa4"},{"location":"MATLAB/LAB1/#_4","text":"Conclusion \u7531\u4e0a\u4e00\u90e8\u5206\u4e2d\u7684\u622a\u56fe\u77e5\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u6700\u540e\u751f\u6210\u7684\u9879\u76ee\u7b26\u5408ppt\u4e2d\u7684\u5b9e\u9a8c\u8981\u6c42\u3002","title":"\u56db\u3001\u5b9e\u9a8c\u7ed3\u8bba"},{"location":"MATLAB/LAB1/#_5","text":"\u901a\u8fc7\u5bf9lab1\u5230lab6\u7684\u5b9e\u9a8c\u6307\u5357\u7684\u5b66\u4e60\uff0c\u638c\u63e1\u4e86\u4f7f\u7528vivado\u8fdb\u884c\u4eff\u771f\u3001\u751f\u6210\u5e76\u89c2\u5bdfsynthesis\u548cimplementation\u62a5\u544a\u3001\u4f7f\u7528IP\u89e3\u51b3timing\u95ee\u9898\u3001\u8bbe\u7f6e\u7ba1\u811a\u3001\u5229\u7528sdk\u548cTeraTerm\u5bf9\u751f\u6210\u7684\u9879\u76ee\u529f\u80fd\u8fdb\u884c\u9a8c\u8bc1\u3001\u751f\u6210ILA\u8fdb\u884cdebug\u7b49\u6280\u80fd\u3002 \u611f\u8c22\u8001\u5e08\u548c\u52a9\u6559\u7684\u6307\u5bfc\uff01","title":"\u4e94\u3001\u5b9e\u9a8c\u611f\u60f3"},{"location":"MATLAB/MATLAB/","text":"matrix laboratory \u8ba1\u7b97\u5de5\u5177 log \u4ee5\u81ea\u7136\u5bf9\u6570\u4e3a\u5e95 log2 \u5e95\u6570 \u53ea\u80fd2\u548c10 \u5176\u4ed6\u7684\u7528\u6362\u5e95\u516c\u5f0f variable \u90fd\u662f\u5185\u5b58\u7684\u4e00\u5757\u7a7a\u95f4 x = 10 meet x + 1 = 2 (false) \"=\" \u2192 \u8d4b\u503c\uff08\u4f1a\u8986\u76d6\u503c\uff09 terminal\u8fd0\u884c\u7c7b\u4f3cLinux \u5411\u91cf vector x = [1,2,3] x = [1 2 3] \u201c;\u201d\u6765\u5206\u884c A.*B \u2192\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u4e58 \u4ea4\u4e92\u5f0f\u8fd0\u884c\u811a\u672c 1 2 3 4 5 6 7 8 9 10 11 12 Input : x = input ( 'Please input x:' ); Output : fprintf ( 'output is %f\\n' , x ) ------------ if\u9009\u62e9 ---------------- num = input ( 'please input a num' ); if num > 22 fprintf ( 'negative' ); elseif ..... else fprintf ( 'positive' ); end disp 1 2 disp ( a ); %\u81ea\u52a8\u52a0\u56de\u8f66 \u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u6cd5 disp ([ 'apple' , 'banana' , 'orange' ]); LOOP while 1 2 3 while xxx ...mod --> \u53d6\u4f59 end for 1 2 3 4 5 6 7 8 9 10 11 12 for i = 10 : - 1 : 5 % begin number : decline number : end number disp ( i ); end v = [ 5 7 9 10 13 3 2 1 ] for i = v disp ( i ); end %\u5185\u7f6e\u7684sum\u51fd\u6570 sum ( v ); function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 %n - input parameter / arguments function mysum ( n ) sum = 0 ; for i = 1 : n sum = sum + i ; end disp ( sum ); end ---------------------------------- function result = mysum ( a,b ) %output - result sum = 0 ; for i = a : b sum = sum + i ; end result = sum ; end factor \u7ea6\u6570 1 2 3 4 5 6 7 8 9 10 function result = count_facor ( n ) count = 0 ; for i = 1 : n if mod ( n , i ) == 0 count = count + 1 ; end end result = count ; end is_primer 1 2 3 4 5 6 7 8 9 function result = is_primer ( n ) count = mysum ( n ); if count == 2 result = 1 ; else result = 0 ; end end \u753b\u56fe 1 2 3 4 >> x = - 3 : 0.1 : 3 ; >> y = x .^ 2 ; >> plot ( x , y ) >> 1 >> plot ( x , y , 'green-o' , x , y1 , 'red-*' ) 1 >> axis equal 1 2 3 x = [1 2 3]; y = [10 20 30]; bar(y) 1 2 3 4 grid on ; %\u8868\u793a\u52a0\u7f51\u683c title ( ' xxxxx' ); xlabel ( 'xxxx' ); ylabel ( ' xxxxx' ); 1 subplot(record,field,number_setted); stem \u2192 \u7528\u6cd5\u548cplot\u4e00\u6837\u4f46\u662f\u662f\u706b\u67f4\u6897\u56fe surf & meshgrid 1 2 3 4 5 x = - 3 : 3 ; y = - 3 : 3 ; [ x , y ] = meshgrid ( x , y ); z = x .^ 2 + y .^ 2 ; surf ( x , y , z ) active 1 2 3 4 5 6 7 8 9 10 11 x = - 2 * pi : 0.1 : 2 * pi ; y = sin ( x ); h = plot ( x , y ); while true : x = x + 0.1 ; y = sin ( x ); set ( h , 'XData' , x , 'YData' , y ); drawnow ; end ones\u51fd\u6570 ones(N) - \u751f\u6210N\u884cN\u5217\u4e14\u6240\u6709\u5143\u7d20\u5747\u4e3a1\u7684\u77e9\u9635 \u5377\u79ef \u2192 conv 1 2 3 nx = 0 : 10 ; x = 0.5 .^ nx ; %x[n]\u7528\u6709\u9650\u957f\u8fd1\u4f3c nh = - 1 : 4 ; h = ones ( 1 , length ( nh )); y = conv ( x , h ); stem ([ min ( nx ) + min ( nh ): max ( nx ) + max ( nh )], y ) \u5bf9\u4e8e\u8bf8\u5982spr,exp,log,sin,cos\u7b49\uff0c\u5185\u90e8\u4e0d\u80fd\u7528\u70b9\u4e58","title":"MATLAB"},{"location":"Network/URL/","text":"1 2 3 ??? note \"URL\" ![](http://pdqq4cby3.bkt.clouddn.com/15371038602996.jpg) ![](http://pdqq4cby3.bkt.clouddn.com/15371039138153.jpg)","title":"URL"},{"location":"Network/network base/","text":"Hacer Way \u00b6 \u8bed\u8a00 \u00b6 script asp\u3001php\u3001jsp html css js html http treaty CMS(B/S) MD5 \u63d0\u6743 \u540e\u95e8\uff1a\u5728\u673a\u5668\u4e0a\u79cd\u690d\u5165\u53e3\u5bf9\u4e3b\u673a\u8fdb\u884c\u957f\u671f\u7684\u63a7\u5236 \u8df3\u677f\uff1a\u4f7f\u7528\u8089\u9e21\u7684IP\u6765\u5b9e\u65bd\u653b\u51fb\u5176\u4ed6\u7684\u76ee\u6807\uff0c\u9690\u85cf\u81ea\u5df1\u7684\u8eab\u4efd\u4fe1\u606f \u65c1\u7ad9\u5165\u4fb5\uff1a\u540c\u670d\u52a1\u5668\u4e0b\u7684\u7f51\u7ad9\u7684\u5165\u4fb5\uff0c\u901a\u8fc7\u63d0\u6743\u8de8\u76ee\u5f55\u7684\u624b\u6bb5\u62ff\u5230\u76ee\u6807\u7f51\u7ad9\u7684\u6743\u9650 --webroot C\u6bb5\u5165\u4fb5\uff1a\u540c\u4e00\u4e2a\u7f51\u6bb5\u4e0a\u7684 \u5982\u76ee\u6807ip\u4e3a192.168.1.253\uff0c\u5165\u4fb5192.168.1.*\u7684\u4efb\u610f\u4e00\u53f0\u673a\u5668\uff0c\u7136\u540e\u5229\u7528\u9ed1\u5ba2\u5de5\u5177\u55c5\u63a2\u83b7\u53d6\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u4fe1\u606f-- sniffit snoop tcpdump dsniff \u6e17\u900f\u6d4b\u8bd5\uff1a\u9ed1\u76d2\u6d4b\u8bd5 \u767d\u76d2\u6d4b\u8bd5\uff08\u4ee3\u7801\u5ba1\u8ba1\uff09 APT\uff1aAdvanced Persistent Threat \u9ad8\u7ea7\u53ef\u6301\u7eed\u6027\u653b\u51fb TCP/IP \u672c\u6765\u5c31\u4e0d\u53ef\u9760 arp \u8868 \u8def\u7531\u662f\u6307\u5bfcIP\u62a5\u6587\u53d1\u9001\u7684\u8def\u5f84\u4fe1\u606f bin --\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684 boot --os config file dev --\u5b58\u50a8\u6587\u4ef6 etc --\u914d\u7f6e\u6587\u4ef6 home --\u7528\u6237 lib --\u51fd\u6570\u5e93\u6587\u4ef6 opt --\u5927\u578b\u7a0b\u5e8f proc --\u5f00\u673a\u6587\u4ef6 root --\u8d85\u7ea7\u7528\u6237 slinux --\u7c7b\u4f3c\u5bf9\u7a0b\u5e8f\u63a7\u5236 \u5b89\u5168\u6027\u9ad8 sys --\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6 usr var --\u65e5\u5fd7 \u5b89\u88c5\u7684Apache\u6587\u4ef6\u6839\u76ee\u5f55 uname -r #\u67e5\u770b\u5185\u6838 uname -a #\u66f4\u8be6\u7ec6\u7684 which uname hostname #\u67e5\u770b\u4e3b\u673a\u540d\u79f0 ipconfig cat /proc/cpuinfo #cpu cat /proc/cpumeminfo #memory halt reboot pwd \u8ba1\u7b97\u673a\u7f51\u7edc \u5c40\u57df\u7f51\u8bbe\u8ba1 \u8986\u76d6\u8303\u56f4\u5c0f \u81ea\u5df1\u82b1\u94b1\u4e70\u8bbe\u5907 \u5e26\u5bbd\u56fa\u5b9a \u81ea\u5df1\u7ef4\u62a4 \u63a5\u5165\u5c42(\u53e3\u8981\u591a) \u6c47\u805a\u5c42(\u6d41\u91cf\u8981\u5927) \u5e7f\u57df\u7f51 Internet ISP \u670d\u52a1\u5546 ISP internet\u670d\u52a1\u63d0\u4f9b\u5546 \u670d\u52a1\u5668\u6258\u7ba1\u5230\u673a\u623f \u8ddd\u79bb\u8fdc \u82b1\u94b1\u79df\u5e26\u5bbd","title":"Hacer Way"},{"location":"Network/network base/#hacer-way","text":"","title":"Hacer Way"},{"location":"Network/network base/#_1","text":"script asp\u3001php\u3001jsp html css js html http treaty CMS(B/S) MD5 \u63d0\u6743 \u540e\u95e8\uff1a\u5728\u673a\u5668\u4e0a\u79cd\u690d\u5165\u53e3\u5bf9\u4e3b\u673a\u8fdb\u884c\u957f\u671f\u7684\u63a7\u5236 \u8df3\u677f\uff1a\u4f7f\u7528\u8089\u9e21\u7684IP\u6765\u5b9e\u65bd\u653b\u51fb\u5176\u4ed6\u7684\u76ee\u6807\uff0c\u9690\u85cf\u81ea\u5df1\u7684\u8eab\u4efd\u4fe1\u606f \u65c1\u7ad9\u5165\u4fb5\uff1a\u540c\u670d\u52a1\u5668\u4e0b\u7684\u7f51\u7ad9\u7684\u5165\u4fb5\uff0c\u901a\u8fc7\u63d0\u6743\u8de8\u76ee\u5f55\u7684\u624b\u6bb5\u62ff\u5230\u76ee\u6807\u7f51\u7ad9\u7684\u6743\u9650 --webroot C\u6bb5\u5165\u4fb5\uff1a\u540c\u4e00\u4e2a\u7f51\u6bb5\u4e0a\u7684 \u5982\u76ee\u6807ip\u4e3a192.168.1.253\uff0c\u5165\u4fb5192.168.1.*\u7684\u4efb\u610f\u4e00\u53f0\u673a\u5668\uff0c\u7136\u540e\u5229\u7528\u9ed1\u5ba2\u5de5\u5177\u55c5\u63a2\u83b7\u53d6\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u4fe1\u606f-- sniffit snoop tcpdump dsniff \u6e17\u900f\u6d4b\u8bd5\uff1a\u9ed1\u76d2\u6d4b\u8bd5 \u767d\u76d2\u6d4b\u8bd5\uff08\u4ee3\u7801\u5ba1\u8ba1\uff09 APT\uff1aAdvanced Persistent Threat \u9ad8\u7ea7\u53ef\u6301\u7eed\u6027\u653b\u51fb TCP/IP \u672c\u6765\u5c31\u4e0d\u53ef\u9760 arp \u8868 \u8def\u7531\u662f\u6307\u5bfcIP\u62a5\u6587\u53d1\u9001\u7684\u8def\u5f84\u4fe1\u606f bin --\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7684 boot --os config file dev --\u5b58\u50a8\u6587\u4ef6 etc --\u914d\u7f6e\u6587\u4ef6 home --\u7528\u6237 lib --\u51fd\u6570\u5e93\u6587\u4ef6 opt --\u5927\u578b\u7a0b\u5e8f proc --\u5f00\u673a\u6587\u4ef6 root --\u8d85\u7ea7\u7528\u6237 slinux --\u7c7b\u4f3c\u5bf9\u7a0b\u5e8f\u63a7\u5236 \u5b89\u5168\u6027\u9ad8 sys --\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6 usr var --\u65e5\u5fd7 \u5b89\u88c5\u7684Apache\u6587\u4ef6\u6839\u76ee\u5f55 uname -r #\u67e5\u770b\u5185\u6838 uname -a #\u66f4\u8be6\u7ec6\u7684 which uname hostname #\u67e5\u770b\u4e3b\u673a\u540d\u79f0 ipconfig cat /proc/cpuinfo #cpu cat /proc/cpumeminfo #memory halt reboot pwd \u8ba1\u7b97\u673a\u7f51\u7edc \u5c40\u57df\u7f51\u8bbe\u8ba1 \u8986\u76d6\u8303\u56f4\u5c0f \u81ea\u5df1\u82b1\u94b1\u4e70\u8bbe\u5907 \u5e26\u5bbd\u56fa\u5b9a \u81ea\u5df1\u7ef4\u62a4 \u63a5\u5165\u5c42(\u53e3\u8981\u591a) \u6c47\u805a\u5c42(\u6d41\u91cf\u8981\u5927) \u5e7f\u57df\u7f51 Internet ISP \u670d\u52a1\u5546 ISP internet\u670d\u52a1\u63d0\u4f9b\u5546 \u670d\u52a1\u5668\u6258\u7ba1\u5230\u673a\u623f \u8ddd\u79bb\u8fdc \u82b1\u94b1\u79df\u5e26\u5bbd","title":"\u8bed\u8a00"}]}